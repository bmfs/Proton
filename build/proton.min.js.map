{"version":3,"file":"proton.min.js","sources":["../src/math/MathUtils.js","../src/math/Span.js","../src/utils/WebGLUtil.js","../src/utils/DomUtil.js","../src/utils/ImgUtil.js","../src/utils/Util.js","../src/utils/PUID.js","../src/core/Pool.js","../src/debug/Stats.js","../src/events/EventDispatcher.js","../src/math/Integration.js","../src/core/Proton.js","../src/math/ease.js","../src/math/Vector2D.js","../src/core/Particle.js","../src/utils/ColorUtil.js","../src/math/Polar2D.js","../src/math/Mat3.js","../src/math/ColorSpan.js","../src/math/ArraySpan.js","../src/math/Rectangle.js","../src/initialize/Rate.js","../src/initialize/Initialize.js","../src/initialize/Life.js","../src/zone/Zone.js","../src/zone/PointZone.js","../src/initialize/Position.js","../src/initialize/Velocity.js","../src/initialize/Mass.js","../src/initialize/Radius.js","../src/initialize/Body.js","../src/behaviour/Behaviour.js","../src/behaviour/Force.js","../src/behaviour/Attraction.js","../src/behaviour/RandomDrift.js","../src/behaviour/Gravity.js","../src/behaviour/Collision.js","../src/behaviour/CrossZone.js","../src/behaviour/Alpha.js","../src/behaviour/Scale.js","../src/behaviour/Rotate.js","../src/behaviour/Color.js","../src/behaviour/Repulsion.js","../src/behaviour/GravityWell.js","../src/initialize/InitializeUtil.js","../src/emitter/Emitter.js","../src/emitter/BehaviourEmitter.js","../src/emitter/FollowEmitter.js","../src/render/BaseRenderer.js","../src/render/CanvasRenderer.js","../src/render/DomRenderer.js","../src/render/EaselRenderer.js","../src/render/PixelRenderer.js","../src/render/PixiRenderer.js","../src/utils/MStack.js","../src/render/WebGLRenderer.js","../src/render/CustomRenderer.js","../src/zone/LineZone.js","../src/zone/CircleZone.js","../src/zone/RectZone.js","../src/zone/ImageZone.js","../src/debug/Debug.js","../src/polyfill/requestAnimationFrame.js","../src/index.js"],"sourcesContent":["const PI = 3.1415926;\n\nconst MathUtils = {\n\n    PI: PI,\n    PIx2: PI * 2,\n    PI_2: PI / 2,\n    PI_180: PI / 180,\n    N180_PI: 180 / PI,\n\n    randomAToB(a, b, INT) {\n        if (!INT)\n            return a + Math.random() * (b - a);\n        else\n            return Math.floor(Math.random() * (b - a)) + a;\n    },\n\n    randomFloating(center, f, INT) {\n        return this.randomAToB(center - f, center + f, INT);\n    },\n\n    randomZone(display) {},\n\n    degreeTransform(a) {\n        return a * PI / 180;\n    },\n\n    toColor16(num) {\n        return '#' + num.toString(16);\n    },\n\n    randomColor() {\n        return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).slice(-6);\n    }\n}\n\nexport default MathUtils;","import Util from '../utils/Util';\nimport MathUtils from '../math/MathUtils';\n\nexport default class Span {\n\n\tconstructor(a, b, center) {\n\t\tthis.isArray = false;\n\n\t\tif (Util.isArray(a)) {\n\t\t\tthis.isArray = true;\n\t\t\tthis.a = a;\n\t\t} else {\n\t\t\tthis.a = Util.initValue(a, 1);\n\t\t\tthis.b = Util.initValue(b, this.a);\n\t\t\tthis.center = Util.initValue(center, false);\n\t\t}\n\n\t}\n\n\tgetValue(INT) {\n\t\tif (this.isArray) {\n\t\t\treturn this.a[Math.floor(this.a.length * Math.random())];\n\t\t} else {\n\t\t\tif (!this.center)\n\t\t\t\treturn MathUtils.randomAToB(this.a, this.b, INT);\n\t\t\telse\n\t\t\t\treturn MathUtils.randomFloating(this.a, this.b, INT);\n\t\t}\n\t}\n}","export default {\n\n    /**\n     * @memberof Proton#Proton.WebGLUtil\n     * @method ipot\n     *\n     * @todo add description\n     * @todo add length description\n     *\n     * @param {Number} length\n     *\n     * @return {Boolean}\n     */\n    ipot(length) {\n        return (length & (length - 1)) === 0;\n    },\n\n    /**\n     * @memberof Proton#Proton.WebGLUtil\n     * @method nhpot\n     *\n     * @todo add description\n     * @todo add length description\n     *\n     * @param {Number} length\n     *\n     * @return {Number}\n     */\n    nhpot(length) {\n        --length;\n        for (let i = 1; i < 32; i <<= 1) {\n            length = length | length >> i;\n        }\n\n        return length + 1;\n    },\n\n    /**\n     * @memberof Proton#Proton.WebGLUtil\n     * @method makeTranslation\n     *\n     * @todo add description\n     * @todo add tx, ty description\n     * @todo add return description\n     *\n     * @param {Number} tx either 0 or 1\n     * @param {Number} ty either 0 or 1\n     *\n     * @return {Object}\n     */\n    makeTranslation(tx, ty) {\n        return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n    },\n\n    /**\n     * @memberof Proton#Proton.WebGLUtil\n     * @method makeRotation\n     *\n     * @todo add description\n     * @todo add return description\n     *\n     * @param {Number} angleInRadians\n     *\n     * @return {Object}\n     */\n    makeRotation(angleInRadians) {\n        let c = Math.cos(angleInRadians);\n        let s = Math.sin(angleInRadians);\n\n        return [c, -s, 0, s, c, 0, 0, 0, 1];\n    },\n\n    /**\n     * @memberof Proton#Proton.WebGLUtil\n     * @method makeScale\n     *\n     * @todo add description\n     * @todo add tx, ty description\n     * @todo add return description\n     *\n     * @param {Number} sx either 0 or 1\n     * @param {Number} sy either 0 or 1\n     *\n     * @return {Object}\n     */\n    makeScale(sx, sy) {\n        return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n    },\n\n    /**\n     * @memberof Proton#Proton.WebGLUtil\n     * @method matrixMultiply\n     *\n     * @todo add description\n     * @todo add a, b description\n     * @todo add return description\n     *\n     * @param {Object} a\n     * @param {Object} b\n     *\n     * @return {Object}\n     */\n    matrixMultiply(a, b) {\n        let a00 = a[0 * 3 + 0];\n        let a01 = a[0 * 3 + 1];\n        let a02 = a[0 * 3 + 2];\n        let a10 = a[1 * 3 + 0];\n        let a11 = a[1 * 3 + 1];\n        let a12 = a[1 * 3 + 2];\n        let a20 = a[2 * 3 + 0];\n        let a21 = a[2 * 3 + 1];\n        let a22 = a[2 * 3 + 2];\n        let b00 = b[0 * 3 + 0];\n        let b01 = b[0 * 3 + 1];\n        let b02 = b[0 * 3 + 2];\n        let b10 = b[1 * 3 + 0];\n        let b11 = b[1 * 3 + 1];\n        let b12 = b[1 * 3 + 2];\n        let b20 = b[2 * 3 + 0];\n        let b21 = b[2 * 3 + 1];\n        let b22 = b[2 * 3 + 2];\n\n        return [\n            a00 * b00 + a01 * b10 + a02 * b20,\n            a00 * b01 + a01 * b11 + a02 * b21,\n            a00 * b02 + a01 * b12 + a02 * b22,\n            a10 * b00 + a11 * b10 + a12 * b20,\n            a10 * b01 + a11 * b11 + a12 * b21,\n            a10 * b02 + a11 * b12 + a12 * b22,\n            a20 * b00 + a21 * b10 + a22 * b20,\n            a20 * b01 + a21 * b11 + a22 * b21,\n            a20 * b02 + a21 * b12 + a22 * b22\n        ];\n    }\n}","export default {\n\n    /**\n     * Creates and returns a new canvas. The opacity is by default set to 0\n     *\n     * @memberof Proton#Proton.DomUtil\n     * @method createCanvas\n     *\n     * @param {String} $id the canvas' id\n     * @param {Number} $width the canvas' width\n     * @param {Number} $height the canvas' height\n     * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n     *\n     * @return {Object}\n     */\n    createCanvas(id, width, height, position) {\n        const dom = document.createElement('canvas');\n        position = position || 'absolute';\n\n        dom.id = id;\n        dom.width = width;\n        dom.height = height;\n        dom.style.opacity = 0;\n        dom.style.position = position;\n\n        this.transform(dom, -500, -500, 0, 0);\n\n        return dom;\n    },\n\n    createDiv(id, width, height) {\n        const dom = document.createElement('div');\n\n        dom.id = id;\n        dom.style.position = 'absolute';\n        this.resize(dom, width, height);\n\n        return dom;\n    },\n\n    resize(dom, width, height) {\n        dom.style.width = width + 'px';\n        dom.style.height = height + 'px';\n        dom.style.marginLeft = -width / 2 + 'px';\n        dom.style.marginTop = -height / 2 + 'px';\n    },\n\n    /**\n     * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n     *\n     * @memberof Proton#Proton.DomUtil\n     * @method transform\n     *\n     * @param {HTMLDivElement} div\n     * @param {Number} $x\n     * @param {Number} $y\n     * @param {Number} $scale\n     * @param {Number} $rotate\n     */\n    transform(div, x, y, scale, rotate) {\n        const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n\n        div.style.willChange = 'transform';\n        this.css3(div, 'transform', transform);\n    },\n\n    transform3d(div, x, y, scale, rotate) {\n        const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n\n        div.style.willChange = 'transform';\n        this.css3(div, 'backfaceVisibility', 'hidden');\n        this.css3(div, 'transform', transform);\n    },\n\n    css3(div, key, val) {\n        const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n        div.style[`Webkit${bkey}`] = val;\n        div.style[`Moz${bkey}`] = val;\n        div.style[`O${bkey}`] = val;\n        div.style[`ms${bkey}`] = val;\n        div.style[`${key}`] = val;\n    }\n}","import WebGLUtil from './WebGLUtil';\nimport DomUtil from './DomUtil';\n\nconst IMG_CACHE = {};\nconst CANVAS_CACHE = {};\nlet canvasID = 0;\n\nexport default {\n\n    /**\n     * This will get the image data. It could be necessary to create a Proton.Zone.\n     *\n     * @memberof Proton#Proton.Util\n     * @method getImageData\n     *\n     * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n     * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n     * @param {Proton.Rectangle}    rect\n     */\n    getImageData(context, image, rect) {\n        context.drawImage(image, rect.x, rect.y);\n        const imagedata = context.getImageData(rect.x, rect.y, rect.width, rect.height);\n        context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n        return imagedata;\n    },\n\n    /**\n     * @memberof Proton#Proton.Util\n     * @method getImgFromCache\n     *\n     * @todo add description\n     * @todo describe func\n     *\n     * @param {Mixed}               img\n     * @param {Proton.Particle}     particle\n     * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.transform.canvas\n     * @param {Boolean}             func\n     */\n    getImgFromCache(img, callback, param) {\n        const src = typeof (img) === 'string' ? img : img.src;\n\n        if (IMG_CACHE[src]) {\n            callback(IMG_CACHE[src], param);\n        } else {\n            const image = new Image();\n            image.onload = e => {\n                IMG_CACHE[src] = e.target;\n                callback(IMG_CACHE[src], param);\n            }\n\n            image.src = src;\n        }\n    },\n\n    getCanvasFromCache(img, callback, param) {\n        const src = img.src;\n\n        if (!CANVAS_CACHE[src]) {\n            const width = WebGLUtil.nhpot(img.width);\n            const height = WebGLUtil.nhpot(img.height);\n\n            const canvas = DomUtil.createCanvas(`canvas_cache_${canvasID}`, width, height);\n            const context = canvas.getContext('2d');\n            context.drawImage(img, 0, 0, img.width, img.height);\n\n            CANVAS_CACHE[src] = canvas;\n        }\n\n        callback && callback(CANVAS_CACHE[src], param);\n\n        return CANVAS_CACHE[src];\n    }\n}","import Span from '../math/Span';\nimport ImgUtil from './ImgUtil';\n\nexport default {\n\n    /**\n     * Returns the default if the value is null or undefined\n     *\n     * @memberof Proton#Proton.Util\n     * @method initValue\n     *\n     * @param {Mixed} value a specific value, could be everything but null or undefined\n     * @param {Mixed} defaults the default if the value is null or undefined\n     */\n    initValue(value, defaults) {\n        value = (value !== null && value !== undefined) ? value : defaults;\n        return value;\n    },\n\n    /**\n     * Checks if the value is a valid array\n     *\n     * @memberof Proton#Proton.Util\n     * @method isArray\n     *\n     * @param {Array} value Any array\n     *\n     * @returns {Boolean}\n     */\n    isArray(value) {\n        return Object.prototype.toString.call(value) === '[object Array]';\n    },\n\n    /**\n     * Destroyes the given array\n     *\n     * @memberof Proton#Proton.Util\n     * @method destroyArray\n     *\n     * @param {Array} array Any array\n     */\n    destroyArray(array) {\n        if (array) array.length = 0;\n    },\n\n    /**\n     * Destroyes the given object\n     *\n     * @memberof Proton#Proton.Util\n     * @method destroyObject\n     *\n     * @param {Object} obj Any object\n     */\n    destroyObject(obj, ignore) {\n        for (let o in obj) {\n            if (ignore && ignore.indexOf(o) > -1) continue;\n            delete obj[o];\n        }\n    },\n\n    /**\n     * Makes an instance of a class and binds the given array\n     *\n     * @memberof Proton#Proton.Util\n     * @method classApply\n     *\n     * @param {Function} constructor A class to make an instance from\n     * @param {Array} [args] Any array to bind it to the constructor\n     *\n     * @return {Object} The instance of constructor, optionally bind with args\n     */\n    classApply(constructor, args) {\n        if (!args) return new constructor;\n\n        args = [null].concat(args);\n        const FactoryFunc = constructor.bind.apply(constructor, args);\n        return new FactoryFunc();\n    },\n\n    /**\n     * @memberof Proton#Proton.Util\n     * @method setVector2DByObject\n     *\n     * @todo add description for param `target`\n     * @todo add description for param `pOBJ`\n     * @todo add description for function\n     *\n     * @param {Object} target\n     * @param {Object} pOBJ\n     */\n    setVector2DByObject(target, pOBJ) {\n        if (this.hasProp(pOBJ, 'x')) target.p.x = pOBJ['x'];\n        if (this.hasProp(pOBJ, 'y')) target.p.y = pOBJ['y'];\n\n        if (this.hasProp(pOBJ, 'vx')) target.v.x = pOBJ['vx'];\n        if (this.hasProp(pOBJ, 'vy')) target.v.y = pOBJ['vy'];\n\n        if (this.hasProp(pOBJ, 'ax')) target.a.x = pOBJ['ax'];\n        if (this.hasProp(pOBJ, 'ay')) target.a.y = pOBJ['ay'];\n\n        if (this.hasProp(pOBJ, 'p')) target.p.copy(pOBJ['p']);\n        if (this.hasProp(pOBJ, 'v')) target.v.copy(pOBJ['v']);\n        if (this.hasProp(pOBJ, 'a')) target.a.copy(pOBJ['a']);\n\n        if (this.hasProp(pOBJ, 'position')) target.p.copy(pOBJ['position']);\n        if (this.hasProp(pOBJ, 'velocity')) target.v.copy(pOBJ['velocity']);\n        if (this.hasProp(pOBJ, 'accelerate')) target.a.copy(pOBJ['accelerate']);\n    },\n\n    hasProp(obj, key) {\n        if (!obj) return false;\n        return obj[key] !== undefined;\n        // return obj.hasOwnProperty(key);\n    },\n\n    /**\n     * set the prototype in a given prototypeObject\n     *\n     * @memberof Proton#Proton.Util\n     * @method setPrototypeByObject\n     *\n     * @todo add description for param `target`\n     * @todo add description for param `filters`\n     * @todo translate desription from chinese to english\n     *\n     * @param {Object} target\n     * @param {Object} prototypeObject An object of single prototypes\n     * @param {Object} filters\n     *\n     * @return {Object} target\n     */\n    setPrototypeByObject(target, prototypeObject, filters) {\n        for (let singleProp in prototypeObject) {\n            if (target.hasOwnProperty(singleProp)) {\n                if (filters) {\n                    if (filters.indexOf(singleProp) < 0)\n                        target[singleProp] = this.getSpanValue(prototypeObject[singleProp]);\n                } else {\n                    target[singleProp] = this.getSpanValue(prototypeObject[singleProp]);\n                }\n            }\n        }\n\n        return target;\n    },\n\n    /**\n     * Returns a new Span object\n     *\n     * @memberof Proton#Proton.Util\n     * @method setSpanValue\n     *\n     * @todo a, b and c should be 'Mixed' or 'Number'?\n     *\n     * @param {Mixed | Span} a\n     * @param {Mixed}               b\n     * @param {Mixed}               c\n     *\n     * @return {Span}\n     */\n    setSpanValue(a, b, c) {\n        if (a instanceof Span) {\n            return a;\n        } else {\n            if (!b) {\n                return new Span(a);\n            } else {\n                if (!c)\n                    return new Span(a, b);\n                else\n                    return new Span(a, b, c);\n            }\n        }\n    },\n\n    /**\n     * Returns the value from a Span, if the param is not a Span it will return the given parameter\n     *\n     * @memberof Proton#Proton.Util\n     * @method getSpanValue\n     *\n     * @param {Mixed | Span} pan\n     *\n     * @return {Mixed} the value of Span OR the parameter if it is not a Span\n     */\n    getSpanValue(pan) {\n        return pan instanceof Span ? pan.getValue() : pan;\n    },\n\n    /**\n     * This will get the image data. It could be necessary to create a Proton.Zone.\n     *\n     * @memberof Proton#Proton.Util\n     * @method getImageData\n     *\n     * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n     * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n     * @param {Proton.Rectangle}    rect\n     */\n    getImageData(context, image, rect) {\n        return ImgUtil.getImageData(context, image, rect);\n    },\n\n    destroy(arr, param) {\n        let i = arr.length;\n\n        while (i--) {\n            try { arr[i].destroy(param); } catch (e) { }\n            delete arr[i];\n        }\n\n        arr.length = 0;\n    }\n\n}","export default {\n    id: 0,\n    cache: {},\n\n    getID(target) {\n        let uid = this.getCacheID(target);\n        if (uid) return uid;\n\n        uid = `PUID_${this.id++}`;\n        this.cache[uid] = target;\n\n        return uid;\n    },\n\n    getCacheID(target) {\n        let obj;\n        for (let id in this.cache) {\n            obj = this.cache[id];\n\n            if (obj === target) return id;\n            if (typeof obj === 'object' && typeof target === 'object' && obj.isInner && target.isInner) {\n                if (obj.src === target.src)\n                    return id;\n            }\n        }\n\n        return null;\n    },\n\n    getTarget(uid) {\n        return this.cache[uid];\n    }\n}","/**\n * get    -> PUID :: uid-> Body\n *        -> cache[abc].         -> cache[abc] .pop()\n *                               -> create [new Body| clone]\n *        -> return p1: { __pid: abc }\n *\n * expire -> cache[abc]= [p0, p1];\n *\n */\nimport Util from '../utils/Util';\nimport PUID from '../utils/PUID';\n\nexport default class Pool {\n\n    /**\n     * @memberof! Proton#\n     * @constructor\n     * @alias Proton.Pool\n     *\n     * @todo add description\n     * @todo add description of properties\n     *\n     * @property {Number} total\n     * @property {Object} cache\n     */\n    constructor(num) {\n        this.total = 0;\n        this.cache = {};\n    }\n\n    /**\n     * @todo add description\n     *\n     * @method get\n     * @memberof Proton#Proton.Pool\n     *\n     * @param {Object|Function} target\n     * @param {Object} [params] just add if `target` is a function\n     *\n     * @return {Object}\n     */\n    get(target, params, uid) {\n        let p;\n        uid = uid || target.__puid || PUID.getID(target);\n\n        if (this.cache[uid] && this.cache[uid].length > 0)\n            p = this.cache[uid].pop();\n        else\n            p = this.createOrClone(target, params);\n\n        p.__puid = target.__puid || uid;\n        return p;\n    }\n\n    /**\n     * @todo add description\n     *\n     * @method set\n     * @memberof Proton#Proton.Pool\n     *\n     * @param {Object} target\n     *\n     * @return {Object}\n     */\n    expire(target) {\n        return this.getCache(target.__puid).push(target);\n    }\n\n    /**\n     * Creates a new class instance\n     *\n     * @todo add more documentation\n     *\n     * @method create\n     * @memberof Proton#Proton.Pool\n     *\n     * @param {Object|Function} target any Object or Function\n     * @param {Object} [params] just add if `target` is a function\n     *\n     * @return {Object}\n     */\n    createOrClone(target, params) {\n        this.total++;\n\n        if (this.create) {\n            return this.create(target, params);\n        } else if (typeof target === 'function') {\n            return Util.classApply(target, params);\n        } else {\n            return target.clone();\n        }\n    }\n\n    /**\n     * @todo add description - what is in the cache?\n     *\n     * @method getCount\n     * @memberof Proton#Proton.Pool\n     *\n     * @return {Number}\n     */\n    getCount() {\n        let count = 0;\n\n        for (let id in this.cache)\n            count += this.cache[id].length;\n\n        return count++;\n    }\n\n    /**\n     * Destroyes all items from Pool.cache\n     *\n     * @method destroy\n     * @memberof Proton#Proton.Pool\n     */\n    destroy() {\n        for (let id in this.cache) {\n            this.cache[id].length = 0;\n            delete this.cache[id];\n        }\n    }\n\n    /**\n     * Returns Pool.cache\n     *\n     * @method getCache\n     * @memberof Proton#Proton.Pool\n     * @private\n     *\n     * @param {Number} uid the unique id\n     *\n     * @return {Object}\n     */\n    getCache(uid) {\n        uid = uid || 'default';\n\n        if (!this.cache[uid]) this.cache[uid] = [];\n        return this.cache[uid];\n    }\n}","export default class Stats {\n\n    constructor(proton) {\n        this.proton = proton;\n        this.container = null;\n        this.type = 1;\n\n        this.emitterIndex = 0;\n        this.rendererIndex = 0;\n    }\n\n    update(style, body) {\n        this.add(style, body);\n\n        const emitter = this.getEmitter();\n        const renderer = this.getRenderer();\n        let str = '';\n\n        switch (this.type) {\n            case 2:\n                str += 'emitter:' + this.proton.emitters.length + '<br>';\n                if (emitter) str += 'em speed:' + emitter.emitSpeed + '<br>';\n                if (emitter) str += 'pos:' + this.getEmitterPos(emitter);\n                break;\n\n            case 3:\n                if (emitter) str += 'initializes:' + emitter.initializes.length + '<br>';\n                if (emitter) str += '<span style=\"display:inline-block;\">' + this.concatArr(emitter.initializes) + '</span><br>';\n                if (emitter) str += 'behaviours:' + emitter.behaviours.length + '<br>';\n                if (emitter) str += '<span style=\"display:inline-block;\">' + this.concatArr(emitter.behaviours) + '</span><br>';\n                break;\n\n            case 4:\n                if (renderer) str += renderer.name + '<br>';\n                if (renderer) str += 'body:' + this.getCreatedNumber(renderer) + '<br>';\n                break;\n\n            default:\n                str += 'particles:' + this.proton.getCount() + '<br>';\n                str += 'pool:' + this.proton.pool.getCount() + '<br>';\n                str += 'total:' + this.proton.pool.total;\n        }\n\n        this.container.innerHTML = str;\n    }\n\n    add(style, body) {\n        if (!this.container) {\n            this.type = 1;\n\n            this.container = document.createElement('div');\n            this.container.style.cssText = [\n                'position:absolute;bottom:0px;left:0;cursor:pointer;',\n                'opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;',\n                'width:120px;height:50px;background-color:#002;color:#0ff;'\n            ].join('');\n\n            this.container.addEventListener('click', e => {\n                this.type++;\n                if (this.type > 4) this.type = 1;\n            }, false);\n\n            let bg, color;\n            switch (style) {\n                case 2:\n                    bg = '#201';\n                    color = '#f08';\n                    break;\n\n                case 3:\n                    bg = '#020';\n                    color = '#0f0';\n                    break;\n\n                default:\n                    bg = '#002';\n                    color = '#0ff';\n            }\n\n            this.container.style['background-color'] = bg;\n            this.container.style['color'] = color;\n        }\n\n        if (!this.container.parentNode) {\n            body = body || this.body || document.body;\n            body.appendChild(this.container);\n        }\n    }\n\n    getEmitter() {\n        return this.proton.emitters[this.emitterIndex];\n    }\n\n    getRenderer() {\n        return this.proton.renderers[this.rendererIndex];\n    }\n\n    concatArr(arr) {\n        let result = '';\n        if (!arr || !arr.length) return result;\n\n        for (let i = 0; i < arr.length; i++) {\n            result += (arr[i].name || '').substr(0, 1) + '.';\n        }\n\n        return result;\n    }\n\n    getCreatedNumber(renderer) {\n        return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n    }\n\n    getEmitterPos(e) {\n        return Math.round(e.p.x) + ',' + Math.round(e.p.y);\n    }\n}","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n\n    constructor() {\n        this._listeners = null;\n    }\n\n    static bind(TargetClass) {\n        TargetClass.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n        TargetClass.prototype.hasEventListener = EventDispatcher.prototype.hasEventListener;\n        TargetClass.prototype.addEventListener = EventDispatcher.prototype.addEventListener;\n        TargetClass.prototype.removeEventListener = EventDispatcher.prototype.removeEventListener;\n        TargetClass.prototype.removeAllEventListeners = EventDispatcher.prototype.removeAllEventListeners;\n    }\n\n    addEventListener(type, listener) {\n        if (!this._listeners) {\n            this._listeners = {};\n        } else {\n            this.removeEventListener(type, listener);\n        }\n\n        if (!this._listeners[type]) this._listeners[type] = [];\n        this._listeners[type].push(listener);\n\n        return listener;\n    }\n\n    removeEventListener(type, listener) {\n        if (!this._listeners) return;\n        if (!this._listeners[type]) return;\n\n        const arr = this._listeners[type];\n        const length = arr.length;\n\n        for (let i = 0; i < length; i++) {\n            if (arr[i] === listener) {\n                if (length === 1) {\n                    delete (this._listeners[type]);\n                }\n\n                // allows for faster checks.\n                else {\n                    arr.splice(i, 1);\n                }\n\n                break;\n            }\n        }\n    }\n\n    removeAllEventListeners(type) {\n        if (!type)\n            this._listeners = null;\n        else if (this._listeners)\n            delete (this._listeners[type]);\n    }\n\n    dispatchEvent(type, args) {\n        let result = false;\n        const listeners = this._listeners;\n\n        if (type && listeners) {\n            let arr = listeners[type];\n            if (!arr) return result;\n\n            // arr = arr.slice();\n            // to avoid issues with items being removed or added during the dispatch\n\n            let handler;\n            let i = arr.length;\n            while (i--) {\n                handler = arr[i];\n                result = result || handler(args);\n            }\n\n        }\n\n        return !!result;\n    }\n\n    hasEventListener(type) {\n        const listeners = this._listeners;\n        return !!(listeners && listeners[type]);\n    }\n\n}","export default class Integration {\n\n\tconstructor(type) {\n\t\tthis.type = type;\n\t}\n\n\tcalculate(particles, time, damping) {\n\t\tthis.eulerIntegrate(particles, time, damping);\n\t}\n\n\t// Euler Integrate\n\teulerIntegrate(particle, time, damping) {\n\t\tif (!particle.sleep) {\n\t\t\tparticle.old.p.copy(particle.p);\n\t\t\tparticle.old.v.copy(particle.v);\n\n\t\t\tparticle.a.multiplyScalar(1 / particle.mass);\n\t\t\tparticle.v.add(particle.a.multiplyScalar(time));\n\t\t\tparticle.p.add(particle.old.v.multiplyScalar(time));\n\n\t\t\tif (damping) particle.v.multiplyScalar(damping);\n\n\t\t\tparticle.a.clear();\n\t\t}\n\t}\n}","import Pool from './Pool';\nimport Util from '../utils/Util';\nimport Stats from '../debug/Stats';\nimport EventDispatcher from '../events/EventDispatcher';\nimport Integration from '../math/Integration';\n\nexport default class Proton {\n\n    static USE_CLOCK = false;\n\n    // 1:100\n    static MEASURE = 100;\n    static EULER = 'euler';\n    static RK2 = 'runge-kutta2';\n\n    static PARTICLE_CREATED = 'PARTICLE_CREATED';\n    static PARTICLE_UPDATE = 'PARTICLE_UPDATE';\n    static PARTICLE_SLEEP = 'PARTICLE_SLEEP';\n    static PARTICLE_DEAD = 'PARTICLE_DEAD';\n    static PROTON_UPDATE = 'PROTON_UPDATE';\n    static PROTON_UPDATE_AFTER = 'PROTON_UPDATE_AFTER';\n    static EMITTER_ADDED = 'EMITTER_ADDED';\n    static EMITTER_REMOVED = 'EMITTER_REMOVED';\n\n    static amendChangeTabsBug = true;\n\n    /**\n     * The constructor to add emitters\n     *\n     * @constructor Proton\n     *\n     * @todo proParticleCount is not in use\n     * @todo add more documentation of the single properties and parameters\n     *\n     * @param {Number} [proParticleCount] not in use?\n     * @param {Number} [integrationType=Proton.EULER]\n     *\n     * @property {String} [integrationType=Proton.EULER]\n     * @property {Array} emitters   All added emitter\n     * @property {Array} renderers  All added renderer\n     * @property {Number} time      The active time\n     * @property {Number} oldtime   The old time\n     */\n    constructor(integrationType) {\n\n        this.emitters = [];\n        this.renderers = [];\n\n        this.time = 0;\n        this.oldTime = 0;\n        this.elapsed = 0;\n\n        this.stats = new Stats(this);\n        this.pool = new Pool(80);\n\n        this.integrationType = Util.initValue(integrationType, Proton.EULER);\n        this.integrator = new Integration(this.integrationType);\n    }\n\n    /**\n    * add a type of Renderer\n    *\n    * @method addRenderer\n    * @memberof Proton\n    * @instance\n    *\n    * @param {Renderer} render\n    */\n    addRenderer(render) {\n        render.init(this);\n        this.renderers.push(render);\n    }\n\n    /**\n    * @name add a type of Renderer\n    *\n    * @method addRenderer\n    * @param {Renderer} render\n    */\n    removeRenderer(render) {\n        const index = this.renderers.indexOf(render);\n        this.renderers.splice(index, 1);\n        render.remove(this);\n    }\n\n    /**\n     * add the Emitter\n     *\n     * @method addEmitter\n     * @memberof Proton\n     * @instance\n     *\n     * @param {Emitter} emitter\n     */\n    addEmitter(emitter) {\n        this.emitters.push(emitter);\n        emitter.parent = this;\n\n        this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n    }\n\n    /**\n     * Removes an Emitter\n     *\n     * @method removeEmitter\n     * @memberof Proton\n     * @instance\n     *\n     * @param {Proton.Emitter} emitter\n     */\n    removeEmitter(emitter) {\n        const index = this.emitters.indexOf(emitter);\n        this.emitters.splice(index, 1);\n        emitter.parent = null;\n\n        this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n    }\n\n    /**\n     * Updates all added emitters\n     *\n     * @method update\n     * @memberof Proton\n     * @instance\n     */\n    update() {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n\n        if (Proton.USE_CLOCK) {\n            if (!this.oldTime) this.oldTime = (new Date()).getTime();\n\n            let time = new Date().getTime();\n            this.elapsed = (time - this.oldTime) / 1000;\n            Proton.amendChangeTabsBug && this.amendChangeTabsBug();\n\n            this.oldTime = time;\n        } else {\n            this.elapsed = 0.0167;\n        }\n\n        // emitter update\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    emittersUpdate(elapsed) {\n        let i = this.emitters.length;\n        while (i--) this.emitters[i].update(elapsed);\n    }\n\n    /**\n     * @todo add description\n     *\n     * @method amendChangeTabsBug\n     * @memberof Proton\n     * @instance\n     */\n    amendChangeTabsBug() {\n        if (this.elapsed > 0.5) {\n            this.oldTime = (new Date()).getTime();\n            this.elapsed = 0;\n        }\n    }\n\n    /**\n     * Counts all particles from all emitters\n     *\n     * @method getCount\n     * @memberof Proton\n     * @instance\n     */\n    getCount() {\n        let total = 0;\n        let i = this.emitters.length;\n\n        while (i--) total += this.emitters[i].particles.length;\n        return total;\n    }\n\n    getAllParticles() {\n        let particles = [];\n        let i = this.emitters.length;\n\n        while (i--) particles = particles.concat(this.emitters[i].particles);\n        return particles;\n    }\n\n    /**\n     * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n     *\n     * @method destroy\n     * @memberof Proton\n     * @instance\n     */\n    destroy() {\n        Util.destroy(this.renderers, this.getAllParticles());\n        Util.destroy(this.emitters);\n\n        this.time = 0;\n        this.oldTime = 0;\n\n        this.pool.destroy();\n    }\n}\n\nEventDispatcher.bind(Proton);","import MathUtils from './MathUtils';\n\nexport default {\n\n    easeLinear(value) {\n        return value;\n    },\n\n    easeInQuad(value) {\n        return Math.pow(value, 2);\n    },\n\n    easeOutQuad(value) {\n        return -(Math.pow((value - 1), 2) - 1);\n    },\n\n    easeInOutQuad(value) {\n        if ((value /= 0.5) < 1)\n            return 0.5 * Math.pow(value, 2);\n\n        return -0.5 * ((value -= 2) * value - 2);\n    },\n\n    easeInCubic(value) {\n        return Math.pow(value, 3);\n    },\n\n    easeOutCubic(value) {\n        return (Math.pow((value - 1), 3) + 1);\n    },\n\n    easeInOutCubic(value) {\n        if ((value /= 0.5) < 1)\n            return 0.5 * Math.pow(value, 3);\n\n        return 0.5 * (Math.pow((value - 2), 3) + 2);\n    },\n\n    easeInQuart(value) {\n        return Math.pow(value, 4);\n    },\n\n    easeOutQuart(value) {\n        return -(Math.pow((value - 1), 4) - 1);\n    },\n\n    easeInOutQuart(value) {\n        if ((value /= 0.5) < 1)\n            return 0.5 * Math.pow(value, 4);\n\n        return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n    },\n\n    easeInSine(value) {\n        return -Math.cos(value * (MathUtils.PI_2)) + 1;\n    },\n\n    easeOutSine(value) {\n        return Math.sin(value * (MathUtils.PI_2));\n    },\n\n    easeInOutSine(value) {\n        return (-0.5 * (Math.cos(MathUtils.PI * value) - 1));\n    },\n\n    easeInExpo(value) {\n        return (value === 0) ? 0 : Math.pow(2, 10 * (value - 1));\n    },\n\n    easeOutExpo(value) {\n        return (value === 1) ? 1 : -Math.pow(2, -10 * value) + 1;\n    },\n\n    easeInOutExpo(value) {\n        if (value === 0)\n            return 0;\n\n        if (value === 1)\n            return 1;\n\n        if ((value /= 0.5) < 1)\n            return 0.5 * Math.pow(2, 10 * (value - 1));\n\n        return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n    },\n\n    easeInCirc(value) {\n        return -(Math.sqrt(1 - (value * value)) - 1);\n    },\n\n    easeOutCirc(value) {\n        return Math.sqrt(1 - Math.pow((value - 1), 2));\n    },\n\n    easeInOutCirc(value) {\n        if ((value /= 0.5) < 1)\n            return -0.5 * (Math.sqrt(1 - value * value) - 1);\n        return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n    },\n\n    easeInBack(value) {\n        let s = 1.70158;\n        return (value) * value * ((s + 1) * value - s);\n    },\n\n    easeOutBack(value) {\n        let s = 1.70158;\n        return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n    },\n\n    easeInOutBack(value) {\n        let s = 1.70158;\n        if ((value /= 0.5) < 1)\n            return 0.5 * (value * value * (((s *= (1.525)) + 1) * value - s));\n        return 0.5 * ((value -= 2) * value * (((s *= (1.525)) + 1) * value + s) + 2);\n    },\n\n    getEasing(ease) {\n        if (typeof ease === 'function')\n            return ease;\n        else\n            return this[ease] || this.easeLinear;\n    }\n};","import MathUtils from '../math/MathUtils';\n\nexport default class Vector2D {\n\n    constructor(x, y) {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n\n    getGradient() {\n        if (this.x !== 0)\n            return Math.atan2(this.y, this.x);\n        else if (this.y > 0)\n            return MathUtils.PI_2;\n        else if (this.y < 0)\n            return -MathUtils.PI_2;\n    }\n\n    copy(v) {\n        this.x = v.x;\n        this.y = v.y;\n\n        return this;\n    }\n\n    add(v, w) {\n        if (w !== undefined) {\n            return this.addVectors(v, w);\n        }\n\n        this.x += v.x;\n        this.y += v.y;\n\n        return this;\n    }\n\n    addXY(a, b) {\n        this.x += a;\n        this.y += b;\n\n        return this;\n    }\n\n    addVectors(a, b) {\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n\n        return this;\n    }\n\n    sub(v, w) {\n        if (w !== undefined) {\n            return this.subVectors(v, w);\n        }\n\n        this.x -= v.x;\n        this.y -= v.y;\n\n        return this;\n    }\n\n    subVectors(a, b) {\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n\n        return this;\n    }\n\n    divideScalar(s) {\n        if (s !== 0) {\n            this.x /= s;\n            this.y /= s;\n        } else {\n            this.set(0, 0);\n        }\n\n        return this;\n    }\n\n    multiplyScalar(s) {\n        this.x *= s;\n        this.y *= s;\n\n        return this;\n    }\n\n    negate() {\n        return this.multiplyScalar(-1);\n    }\n\n    dot(v) {\n        return this.x * v.x + this.y * v.y;\n    }\n\n    lengthSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    normalize() {\n        return this.divideScalar(this.length());\n    }\n\n    distanceTo(v) {\n        return Math.sqrt(this.distanceToSquared(v));\n    }\n\n    rotate(tha) {\n        const x = this.x;\n        const y = this.y;\n\n        this.x = x * Math.cos(tha) + y * Math.sin(tha);\n        this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n        return this;\n    }\n\n    distanceToSquared(v) {\n        const dx = this.x - v.x;\n        const dy = this.y - v.y;\n\n        return dx * dx + dy * dy;\n    }\n\n    lerp(v, alpha) {\n        this.x += (v.x - this.x) * alpha;\n        this.y += (v.y - this.y) * alpha;\n\n        return this;\n    }\n\n    equals(v) {\n        return ((v.x === this.x) && (v.y === this.y));\n    }\n\n    clear() {\n        this.x = 0.0;\n        this.y = 0.0;\n        return this;\n    }\n\n    clone() {\n        return new Vector2D(this.x, this.y);\n    }\n}","import Util from '../utils/Util';\nimport ease from '../math/ease';\nimport Vector2D from '../math/Vector2D';\nimport MathUtils from '../math/MathUtils';\n\nexport default class Particle {\n\n    static ID = 0;\n\n    /**\n     * the Particle class\n     *\n     * @class Proton.Particle\n     * @constructor\n     * @param {Object} pObj the parameters object;\n     * for example {life:3,dead:false}\n     */\n    constructor(pOBJ) {\n        /**\n         * The particle's id;\n         * @property id\n         * @type {string}\n         */\n        this.id = `particle_${Particle.ID++}`;\n        this.reset('init');\n\n        pOBJ && Util.setPrototypeByObject(this, pOBJ);\n    }\n\n    getDirection() {\n        return Math.atan2(this.v.x, -this.v.y) * MathUtils.N180_PI;\n    }\n\n    reset(init) {\n        this.life = Infinity;\n        this.age = 0;\n\n        // Energy loss\n        this.energy = 1;\n        this.dead = false;\n        this.sleep = false;\n        this.body = null;\n        this.sprite = null;\n        this.parent = null;\n\n        this.mass = 1;\n        this.radius = 10;\n        this.alpha = 1;\n        this.scale = 1;\n        this.rotation = 0;\n        this.color = null;\n\n        this.easing = ease.easeLinear;\n\n        if (init === 'init') {\n            this.transform = {};\n            this.p = new Vector2D();\n            this.v = new Vector2D();\n            this.a = new Vector2D();\n\n            this.old = {\n                p: new Vector2D(),\n                v: new Vector2D(),\n                a: new Vector2D()\n            };\n\n            this.behaviours = [];\n        } else {\n            Util.destroyObject(this.transform, 'rgb');\n\n            this.p.set(0, 0);\n            this.v.set(0, 0);\n            this.a.set(0, 0);\n\n            this.old.p.set(0, 0);\n            this.old.v.set(0, 0);\n            this.old.a.set(0, 0);\n\n            this.removeAllBehaviours();\n        }\n\n        if (!this.transform.rgb) {\n            this.transform.rgb = { r: 255, g: 255, b: 255 };\n        } else {\n            this.transform.rgb.r = 255;\n            this.transform.rgb.g = 255;\n            this.transform.rgb.b = 255;\n        }\n\n        return this;\n    }\n\n    update(time, index) {\n        if (!this.sleep) {\n            this.age += time;\n            this.applyBehaviours(time, index);\n        }\n\n        if (this.age < this.life) {\n            const scale = this.easing(this.age / this.life);\n            this.energy = Math.max(1 - scale, 0);\n        } else {\n            this.destroy();\n        }\n    }\n\n    applyBehaviours(time, index) {\n        const length = this.behaviours.length;\n        let i;\n\n        for (i = 0; i < length; i++) {\n            this.behaviours[i] && this.behaviours[i].applyBehaviour(this, time, index)\n        }\n    }\n\n    addBehaviour(behaviour) {\n        this.behaviours.push(behaviour);\n\n        if (behaviour.hasOwnProperty('parents')) behaviour.parents.push(this);\n        behaviour.initialize(this);\n    }\n\n    addBehaviours(behaviours) {\n        const length = behaviours.length;\n        let i;\n\n        for (i = 0; i < length; i++) {\n            this.addBehaviour(behaviours[i]);\n        }\n    }\n\n    removeBehaviour(behaviour) {\n        const index = this.behaviours.indexOf(behaviour);\n\n        if (index > -1) {\n            const behaviour = this.behaviours.splice(index, 1);\n            behaviour.parents = null;\n        }\n    }\n\n    removeAllBehaviours() {\n        Util.destroyArray(this.behaviours);\n    }\n\n    /**\n     * Destory this particle\n     * @method destroy\n     */\n    destroy() {\n        this.removeAllBehaviours();\n        this.energy = 0;\n        this.dead = true;\n        this.parent = null;\n    }\n\n}","export default {\n\n    /**\n     * @typedef  {Object} rgbObject\n     * @property {Number} r red value\n     * @property {Number} g green value\n     * @property {Number} b blue value\n     */\n    /**\n     * converts a hex value to a rgb object\n     *\n     * @memberof Proton#Proton.Util\n     * @method hexToRGB\n     *\n     * @param {String} h any hex value, e.g. #000000 or 000000 for black\n     *\n     * @return {rgbObject}\n     */\n    hexToRGB(h) {\n        const hex16 = (h.charAt(0) === '#') ? h.substring(1, 7) : h;\n        const r = parseInt(hex16.substring(0, 2), 16);\n        const g = parseInt(hex16.substring(2, 4), 16);\n        const b = parseInt(hex16.substring(4, 6), 16);\n\n        return { r, g, b };\n    },\n\n    /**\n     * converts a rgb value to a rgb string\n     *\n     * @memberof Proton#Proton.Util\n     * @method rgbToHex\n     *\n     * @param {Object | Proton.hexToRGB} rgb a rgb object like in {@link Proton#Proton.}\n     *\n     * @return {String} rgb()\n     */\n    rgbToHex(rbg) {\n        return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n    },\n\n    rbgToHexString( rgb ){\n        return \"#\"+((rgb.r & 0xFF) << 16 | (rgb.g & 0xFF) << 8 | (rgb.b & 0xFF)).toString(16);\n    },\n\n    getHex16FromParticle(p) {\n        return Number(p.transform.rgb.r) * 65536 + Number(p.transform.rgb.g) * 256 + Number(p.transform.rgb.b);\n    }\n}","import Vector2D from './Vector2D';\n\nexport default class Polar2D {\n\n\tconstructor(r, tha) {\n\t\tthis.r = Math.abs(r) || 0;\n\t\tthis.tha = tha || 0;\n\t}\n\n\tset(r, tha) {\n\t\tthis.r = r;\n\t\tthis.tha = tha;\n\t\treturn this;\n\t}\n\n\tsetR(r) {\n\t\tthis.r = r;\n\t\treturn this;\n\t}\n\n\tsetTha(tha) {\n\t\tthis.tha = tha;\n\t\treturn this;\n\t}\n\n\tcopy(p) {\n\t\tthis.r = p.r;\n\t\tthis.tha = p.tha;\n\t\treturn this;\n\t}\n\n\ttoVector() {\n\t\treturn new Vector2D(this.getX(), this.getY());\n\t}\n\n\tgetX() {\n\t\treturn this.r * Math.sin(this.tha);\n\t}\n\n\tgetY() {\n\t\treturn -this.r * Math.cos(this.tha);\n\t}\n\n\tnormalize() {\n\t\tthis.r = 1;\n\t\treturn this;\n\t}\n\n\tequals(v) {\n\t\treturn ((v.r === this.r) && (v.tha === this.tha));\n\t}\n\n\tclear() {\n\t\tthis.r = 0.0;\n\t\tthis.tha = 0.0;\n\t\treturn this;\n\t}\n\n\tclone() {\n\t\treturn new Polar2D(this.r, this.tha);\n\t}\n}","export default {\n\tcreate(mat3) {\n\t\tconst mat = new Float32Array(9);\n\t\tif (mat3) this.set(mat3, mat);\n\n\t\treturn mat;\n\t},\n\n\tset(mat1, mat2) {\n\t\tfor (let i = 0; i < 9; i++)\n\t\t\tmat2[i] = mat1[i];\n\n\t\treturn mat2;\n\t},\n\n\tmultiply(mat, mat2, mat3) {\n\t\tlet a00 = mat[0], a01 = mat[1], a02 = mat[2], a10 = mat[3], a11 = mat[4], a20 = mat[6], a21 = mat[7], b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b10 = mat2[3], b11 = mat2[4], b20 = mat2[6], b21 = mat2[7];\n\n\t\tmat3[0] = b00 * a00 + b01 * a10;\n\t\tmat3[1] = b00 * a01 + b01 * a11;\n\t\tmat3[2] = a02 * b02;\n\t\tmat3[3] = b10 * a00 + b11 * a10;\n\t\tmat3[4] = b10 * a01 + b11 * a11;\n\t\tmat3[6] = b20 * a00 + b21 * a10 + a20;\n\t\tmat3[7] = b20 * a01 + b21 * a11 + a21;\n\n\t\treturn mat3;\n\t},\n\n\tinverse(mat, mat3) {\n\t\tlet a00 = mat[0], a01 = mat[1], a10 = mat[3], a11 = mat[4], a20 = mat[6], a21 = mat[7], b01 = a11, b11 = -a10, b21 = a21 * a10 - a11 * a20, d = a00 * b01 + a01 * b11, id;\n\n\t\tid = 1 / d;\n\t\tmat3[0] = b01 * id;\n\t\tmat3[1] = (-a01) * id;\n\t\tmat3[3] = b11 * id;\n\t\tmat3[4] = a00 * id;\n\t\tmat3[6] = b21 * id;\n\t\tmat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n\t\treturn mat3;\n\t},\n\n\tmultiplyVec2(m, vec, mat3) {\n\t\tlet x = vec[0], y = vec[1];\n\n\t\tmat3[0] = x * m[0] + y * m[3] + m[6];\n\t\tmat3[1] = x * m[1] + y * m[4] + m[7];\n\n\t\treturn mat3;\n\t}\n}","import Span from './Span';\nimport Util from '../utils/Util';\nimport ColorUtil from '../utils/ColorUtil';\n\nexport default class ColorSpan extends Span {\n    \n    constructor(color, variantR, variantG, variantB) {\n        super();\n        //this._baseColor = color;\n        var _color = color;\n        \n        if (typeof _color === 'string'){\n            _color = ColorUtil.hexToRGB(color);\n        }\n        \n        this._baseR = _color.r;\n        this._baseG = _color.g;\n        this._baseB = _color.b;\n        \n        this.variantR = Util.initValue(variantR, 0);\n        this.variantG = Util.initValue(variantG, 0);\n        this.variantB = Util.initValue(variantB, 0);\n    }\n\n    getValue() {\n        const r = Math.max(0, Math.min(255, this._baseR + this.variantR * (Math.random() * 2.0 - 1.0)*255));\n        const g = Math.max(0, Math.min(this._baseG + this.variantG * (Math.random() * 2.0 - 1.0)*255));\n        const b = Math.max(0, Math.min(this._baseB + this.variantB * (Math.random() * 2.0 - 1.0)*255));\n\n        return ColorUtil.rbgToHexString({ r, g, b});\n    }\n\n}","import Span from './Span';\nimport Util from '../utils/Util';\nimport MathUtils from './MathUtils';\nimport ColorSpan from './ColorSpan';\n\nexport default class ArraySpan extends Span {\n\n    constructor(color) {\n        super();\n        this._arr = Util.isArray(color) ? color : [color];\n    }\n\n    getValue() {\n        const color = this._arr[Math.floor(this._arr.length * Math.random())];\n        return color === 'random' || color === 'Random' ? MathUtils.randomColor() : color;\n    }\n\n    /**\n     * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n     *\n     * @method setSpanValue\n     * @memberof Proton#Proton.Color\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    static createArraySpan(arr) {\n        if (!arr) return null;\n\n        if (arr instanceof ArraySpan)\n            return arr;\n        if (arr instanceof ColorSpan)\n            return arr;\n        else\n            return new ArraySpan(arr);\n    }\n\n}","export default class Rectangle {\n\n\tconstructor(x, y, w, h) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\tthis.width = w;\n\t\tthis.height = h;\n\n\t\tthis.bottom = this.y + this.height;\n\t\tthis.right = this.x + this.width;\n\t}\n\n\tcontains(x, y) {\n\t\tif (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}\n","import Util from '../utils/Util';\n\nexport default class Rate {\n\n\t/**\n\t * The number of particles per second emission (a [particle]/b [s]);\n\t * @namespace\n\t * @memberof! Proton#\n\t * @constructor\n\t * @alias Rate\n\t *\n\t * @param {Array | Number | Span} numpan the number of each emission;\n\t * @param {Array | Number | Span} timepan the time of each emission;\n\t * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n\t */\n\tconstructor(numpan, timepan) {\n\t\tthis.numPan = Util.setSpanValue(Util.initValue(numpan, 1));\n\t\tthis.timePan = Util.setSpanValue(Util.initValue(timepan, 1));\n\n\t\tthis.startTime = 0;\n\t\tthis.nextTime = 0;\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\tthis.startTime = 0;\n\t\tthis.nextTime = this.timePan.getValue();\n\t}\n\n\tgetValue(time) {\n\t\tthis.startTime += time;\n\n\t\tif (this.startTime >= this.nextTime) {\n\t\t\tthis.startTime = 0;\n\t\t\tthis.nextTime = this.timePan.getValue();\n\n\t\t\tif (this.numPan.b === 1) {\n\t\t\t\tif (this.numPan.getValue(false) > 0.5)\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn this.numPan.getValue(true);\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n}","export default class Initialize {\n\n\treset() {\n\t}\n\n\tinit(emitter, particle) {\n\t\tif (particle) {\n\t\t\tthis.initialize(particle);\n\t\t} else {\n\t\t\tthis.initialize(emitter);\n\t\t}\n\t};\n\n\t// sub class init\n\tinitialize(target) {\n\t};\n}","import Util from '../utils/Util';\nimport Initialize from './Initialize';\n\nexport default class Life extends Initialize {\n\n\tconstructor(a, b, c) {\n\t\tsuper();\n\n\t\tthis.lifePan = Util.setSpanValue(a, b, c);\n\t\tthis.name = 'Life';\n\t}\n\n\tinitialize(target) {\n\t\tif (this.lifePan.a === Infinity)\n\t\t\ttarget.life = Infinity;\n\t\telse\n\t\t\ttarget.life = this.lifePan.getValue();\n\t}\n}\n","import Vector2D from '../math/Vector2D';\n\nexport default class Zone {\n\n\tconstructor() {\n\t\tthis.vector = new Vector2D(0, 0);\n\t\tthis.random = 0;\n\t\tthis.crossType = 'dead';\n\t\tthis.alert = true;\n\t}\n\n\tgetPosition() {\n\t}\n\n\tcrossing(particle) {\n\t}\n}\n","import Zone from './Zone';\n\nexport default class PointZone extends Zone {\n\n\tconstructor(x, y) {\n\t\tsuper();\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tgetPosition() {\n\t\tthis.vector.x = this.x;\n\t\tthis.vector.y = this.y;\n\t\treturn this.vector;\n\t}\n\n\tcrossing(particle) {\n\t\tif (this.alert) {\n\t\t\talert('Sorry PointZone does not support crossing method');\n\t\t\tthis.alert = false;\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport PointZone from '../zone/PointZone';\nimport Initialize from './Initialize';\n\nexport default class Position extends Initialize {\n\n\tconstructor(zone) {\n\t\tsuper();\n\t\tthis.zone = Util.initValue(zone, new PointZone());\n\n\t\tthis.name = 'Position';\n\t}\n\n\treset(zone) {\n\t\tthis.zone = Util.initValue(zone, new PointZone());\n\t}\n\n\tinitialize(target) {\n\t\tthis.zone.getPosition();\n\n\t\ttarget.p.x = this.zone.vector.x;\n\t\ttarget.p.y = this.zone.vector.y;\n\t};\n\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport Polar2D from '../math/Polar2D';\nimport MathUtils from '../math/MathUtils';\nimport Initialize from './Initialize';\n\nexport default class Velocity extends Initialize {\n\n    constructor(rpan, thapan, type) {\n        super();\n\n        this.rPan = Util.setSpanValue(rpan);\n        this.thaPan = Util.setSpanValue(thapan);\n        this.type = Util.initValue(type, 'vector');\n\n        this.name = 'Velocity';\n    }\n\n    reset(rpan, thapan, type) {\n        this.rPan = Util.setSpanValue(rpan);\n        this.thaPan = Util.setSpanValue(thapan);\n        this.type = Util.initValue(type, 'vector');\n    };\n\n    normalizeVelocity(vr) {\n        return vr * Proton.MEASURE;\n    }\n\n    initialize(target) {\n        if (this.type === 'p' || this.type === 'P' || this.type === 'polar') {\n            const polar2d = new Polar2D(this.normalizeVelocity(this.rPan.getValue()), this.thaPan.getValue() * MathUtils.PI_180);\n\n            target.v.x = polar2d.getX();\n            target.v.y = polar2d.getY();\n        } else {\n            target.v.x = this.normalizeVelocity(this.rPan.getValue());\n            target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n        }\n    };\n}","import Util from '../utils/Util';\nimport Initialize from './Initialize';\n\nexport default class Mass extends Initialize {\n\n\tconstructor(a, b, c) {\n\t\tsuper();\n\t\tthis.massPan = Util.setSpanValue(a, b, c);\n\t\tthis.name = 'Mass';\n\t}\n\n\tinitialize(target) {\n\t\ttarget.mass = this.massPan.getValue();\n\t}\n}","import Util from '../utils/Util';\nimport Initialize from './Initialize';\n\nexport default class Radius extends Initialize {\n\n\tconstructor(a, b, c) {\n\t\tsuper();\n\t\tthis.radius = Util.setSpanValue(a, b, c);\n\n\t\tthis.name = 'Radius';\n\t}\n\n\treset(a, b, c) {\n\t\tthis.radius = Util.setSpanValue(a, b, c);\n\t};\n\n\tinitialize(particle) {\n\t\tparticle.radius = this.radius.getValue();\n\t\tparticle.transform.oldRadius = particle.radius;\n\t};\n}","import Util from '../utils/Util';\nimport ArraySpan from '../math/ArraySpan';\nimport Initialize from './Initialize';\n\nexport default class Body extends Initialize {\n\n    constructor(image, w, h) {\n        super();\n\n        this.image = this.setSpanValue(image);\n        this.w = Util.initValue(w, 20);\n        this.h = Util.initValue(h, this.w);\n        this.name = 'Body';\n    }\n\n    initialize(particle) {\n        const imagetarget = this.image.getValue();\n\n        if (typeof (imagetarget) === 'string') {\n            particle.body = { width: this.w, height: this.h, src: imagetarget, isInner: true, inner: true };\n        } else {\n            particle.body = imagetarget;\n        }\n    };\n\n    setSpanValue(color) {\n        return color instanceof ArraySpan ? color : new ArraySpan(color);\n    }\n}","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Attraction extends Behaviour {\n\n\t/**\n\t * This behaviour let the particles follow one specific Proton.Vector2D\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Attraction\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Proton.Vector2D} targetPosition\n\t * @property {Number} radius\n\t * @property {Number} force\n\t * @property {Number} radiusSq\n\t * @property {Proton.Vector2D} attractionForce\n\t * @property {Number} lengthSq\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.targetPosition = Util.initValue(targetPosition, new Vector2D);\n\t\tthis.radius = Util.initValue(radius, 1000);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.radiusSq = this.radius * this.radius\n\t\tthis.attractionForce = new Vector2D();\n\t\tthis.lengthSq = 0;\n\n\t\tthis.name = 'Attraction';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Attraction\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tthis.targetPosition = Util.initValue(targetPosition, new Vector2D);\n\t\tthis.radius = Util.initValue(radius, 1000);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.radiusSq = this.radius * this.radius\n\t\tthis.attractionForce = new Vector2D();\n\t\tthis.lengthSq = 0;\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Attraction\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tthis.attractionForce.copy(this.targetPosition);\n\t\tthis.attractionForce.sub(particle.p);\n\t\tthis.lengthSq = this.attractionForce.lengthSq();\n\n\t\tif (this.lengthSq > 0.000004 && this.lengthSq < this.radiusSq) {\n\t\t\tthis.attractionForce.normalize();\n\t\t\tthis.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n\t\t\tthis.attractionForce.multiplyScalar(this.force);\n\n\t\t\tparticle.a.add(this.attractionForce);\n\t\t}\n\t}\n}","import Vector2D from '../math/Vector2D';\nimport MathUtils from '../math/MathUtils';\nimport Behaviour from './Behaviour';\n\nexport default class RandomDrift extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias RandomDrift\n\t *\n\t * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n\t * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n\t * @param {Number} delay \t\t\t\tHow much delay the drift should have\n\t * @param {Number} [life=Infinity] \t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} time The time of the drift\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(driftX, driftY, delay, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(driftX, driftY, delay);\n\t\tthis.time = 0;\n\t\tthis.name = 'RandomDrift';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#RandomDrift\n\t * @instance\n\t *\n\t * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n\t * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n\t * @param {Number} delay \t\t\t\tHow much delay the drift should have\n\t * @param {Number} [life=Infinity] \t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear] \tthis behaviour's easing\n\t */\n\treset(driftX, driftY, delay, life, easing) {\n\t\tthis.panFoce = new Vector2D(driftX, driftY);\n\t\tthis.panFoce = this.normalizeForce(this.panFoce);\n\t\tthis.delay = delay;\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#RandomDrift\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tthis.time += time;\n\n\t\tif (this.time >= this.delay) {\n\t\t\tparticle.a.addXY(MathUtils.randomAToB(-this.panFoce.x, this.panFoce.x), MathUtils.randomAToB(-this.panFoce.y, this.panFoce.y));\n\t\t\tthis.time = 0;\n\t\t};\n\t}\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Alpha extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Alpha\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Alpha';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Alpha\n\t * @instance\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Util.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Util.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Sets the new alpha value of the particle\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Alpha\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle A single Proton generated particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.transform.alphaA = this.a.getValue();\n\n\t\tif (this.same)\n\t\t\tparticle.transform.alphaB = particle.transform.alphaA;\n\t\telse\n\t\t\tparticle.transform.alphaB = this.b.getValue();\n\t}\n\n\t/**\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Alpha\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n \t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.alpha = particle.transform.alphaB + (particle.transform.alphaA - particle.transform.alphaB) * this.energy;\n\t\tif (particle.alpha < 0.001) particle.alpha = 0;\n\t}\n}\n","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Util.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Util.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.transform.scaleA = this.a.getValue();\n\t\tparticle.transform.oldRadius = particle.radius;\n\t\tparticle.transform.scaleB = this.same ? particle.transform.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.transform.scaleB + (particle.transform.scaleA - particle.transform.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.transform.oldRadius * particle.scale;\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Util.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Util.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.transform.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.transform.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.transform.rotationB + (particle.transform.rotationA - particle.transform.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.transform.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from '../utils/ColorUtil';\nimport ArraySpan from '../math/ArraySpan';\nimport Behaviour from './Behaviour';\n\nexport default class Color extends Behaviour {\n\n    /**\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.Color\n     *\n     * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n     * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n     * @param {Number} [life=Infinity] \tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(a, b, life, easing) {\n        super(life, easing);\n\n        this.reset(a, b);\n        this.name = 'Color';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.Color\n     * @instance\n     *\n     * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n     * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n     * @param {Number} [life=Infinity] \tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(a, b, life, easing) {\n        this.a = ArraySpan.createArraySpan(a);\n        this.b = ArraySpan.createArraySpan(b);\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton#Proton.Color\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {\n        particle.color = this.a.getValue();\n        particle.transform.colorA = ColorUtil.hexToRGB(particle.color);\n\n        if (this.b)\n            particle.transform.colorB = ColorUtil.hexToRGB(this.b.getValue());\n    };\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.Color\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        if (this.b) {\n            this.calculate(particle, time, index);\n\n            particle.transform.rgb.r = particle.transform.colorB.r + (particle.transform.colorA.r - particle.transform.colorB.r) * this.energy;\n            particle.transform.rgb.g = particle.transform.colorB.g + (particle.transform.colorA.g - particle.transform.colorB.g) * this.energy;\n            particle.transform.rgb.b = particle.transform.colorB.b + (particle.transform.colorA.b - particle.transform.colorB.b) * this.energy;\n\n            particle.transform.rgb.r = Math.floor(particle.transform.rgb.r);\n            particle.transform.rgb.g = Math.floor(particle.transform.rgb.g);\n            particle.transform.rgb.b = Math.floor(particle.transform.rgb.b);\n\n        } else {\n            particle.transform.rgb.r = particle.transform.colorA.r;\n            particle.transform.rgb.g = particle.transform.colorA.g;\n            particle.transform.rgb.b = particle.transform.colorA.b;\n        }\n    };\n\n}","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Initialize from './Initialize';\nimport MathUtils from '../math/MathUtils';\n\nexport default {\n\n\tinitialize(emitter, particle, initializes) {\n\t\tconst length = initializes.length;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\tif (initializes[i] instanceof Initialize)\n\t\t\t\tinitializes[i].init(emitter, particle);\n\t\t\telse\n\t\t\t\tthis.init(emitter, particle, initializes[i]);\n\t\t}\n\n\t\tthis.bindEmitter(emitter, particle);\n\t},\n\n\t// init\n\tinit(emitter, particle, initialize) {\n\t\tUtil.setPrototypeByObject(particle, initialize);\n\t\tUtil.setVector2DByObject(particle, initialize);\n\t},\n\n\tbindEmitter(emitter, particle) {\n\t\tif (emitter.bindEmitter) {\n\t\t\tparticle.p.add(emitter.p);\n\t\t\tparticle.v.add(emitter.v);\n\t\t\tparticle.a.add(emitter.a);\n\n\t\t\tparticle.v.rotate(MathUtils.degreeTransform(emitter.rotation));\n\t\t}\n\t}\n}\n","import Util from '../utils/Util';\nimport Particle from '../core/Particle';\nimport EventDispatcher from '../events/EventDispatcher';\n\nimport Rate from '../initialize/Rate';\nimport InitializeUtil from '../initialize/InitializeUtil';\n\nexport default class Emitter extends Particle {\n\n\tstatic ID = 0;\n\n\t/**\n\t * You can use this emit particles.\n\t *\n\t * It will dispatch follow events:\n\t * PARTICLE_CREATED\n\t * PARTICLE_UPDATA\n\t * PARTICLE_DEAD\n\t *\n\t * @class Emitter\n\t * @constructor\n\t * @param {Object} pObj the parameters object;\n\t * for example {damping:0.01,bindEmitter:false}\n\t */\n\tconstructor(pObj) {\n\t\tsuper(pObj);\n\n\t\tthis.initializes = [];\n\t\tthis.particles = [];\n\t\tthis.behaviours = [];\n\n\t\tthis.emitSpeed = 0;\n\t\tthis.emitTime = 0;\n\t\tthis.totalTime = -1;\n\n\t\t/**\n\t\t * The friction coefficient for all particle emit by This;\n\t\t * @property damping\n\t\t * @type {Number}\n\t\t * @default 0.006\n\t\t */\n\t\tthis.damping = .006;\n\n\t\t/**\n\t\t * If bindEmitter the particles can bind this emitter's property;\n\t\t * @property bindEmitter\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.bindEmitter = true;\n\n\t\t/**\n\t\t * The number of particles per second emit (a [particle]/b [s]);\n\t\t * @property rate\n\t\t * @type {Rate}\n\t\t * @default Rate(1, .1)\n\t\t */\n\t\tthis.rate = new Rate(1, .1);\n\n\t\tthis.id = `emitter_${Emitter.ID++}`;\n\t\tthis.name = 'Emitter';\n\t}\n\n\t/**\n\t * start emit particle\n\t * @method emit\n\t * @param {Number} emitTime begin emit time;\n\t * @param {String} life the life of this emitter\n\t */\n\temit(totalTime, life) {\n\t\tthis.stoped = false;\n\t\tthis.emitTime = 0;\n\t\tthis.totalTime = Util.initValue(totalTime, Infinity);\n\n\t\tif (life === true || life === 'life' || life === 'destroy') {\n\t\t\tthis.life = totalTime === 'once' ? 1 : this.totalTime;\n\t\t} else if (!isNaN(life)) {\n\t\t\tthis.life = life;\n\t\t}\n\n\t\tthis.rate.init();\n\t}\n\n\t/**\n\t * stop emiting\n\t * @method stop\n\t */\n\tstop() {\n\t\tthis.totalTime = -1;\n\t\tthis.emitTime = 0;\n\t\tthis.stoped = true;\n\t}\n\n\tpreEmit(time) {\n\t\tlet oldStoped = this.stoped;\n\t\tlet oldEmitTime = this.emitTime;\n\t\tlet oldTotalTime = this.totalTime;\n\n\t\tthis.stoped = false;\n\t\tthis.emitTime = 0;\n\t\tthis.totalTime = time;\n\t\tthis.rate.init();\n\n\t\tconst step = 0.0167;\n\t\twhile (time > step) {\n\t\t\ttime -= step;\n\t\t\tthis.update(step);\n\t\t}\n\n\t\tthis.stoped = oldStoped;\n\t\tthis.emitTime = oldEmitTime + Math.max(time, 0);\n\t\tthis.totalTime = oldTotalTime;\n\t}\n\n\t/**\n\t * remove current all particles\n\t * @method removeAllParticles\n\t */\n\tremoveAllParticles() {\n\t\tlet i = this.particles.length;\n\t\twhile (i--) this.particles[i].dead = true;\n\t}\n\n\t/**\n\t * add initialize to this emitter\n\t * @method addSelfInitialize\n\t */\n\taddSelfInitialize(pObj) {\n\t\tif (pObj['init']) {\n\t\t\tpObj.init(this);\n\t\t} else {\n\t\t\tthis.initAll();\n\t\t}\n\t}\n\n\t/**\n\t * add the Initialize to particles;\n\t *\n\t * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n\t * @method addInitialize\n\t * @param {Initialize} initialize like this new Radius(1, 12)\n\t */\n\taddInitialize(...rest) {\n\t\tlet i = rest.length;\n\t\twhile (i--)\n\t\t\tthis.initializes.push(rest[i]);\n\t}\n\n\t/**\n\t * remove the Initialize\n\t * @method removeInitialize\n\t * @param {Initialize} initialize a initialize\n\t */\n\tremoveInitialize(initializer) {\n\t\tconst index = this.initializes.indexOf(initializer);\n\t\tif (index > -1) this.initializes.splice(index, 1);\n\t}\n\n\t/**\n\t * remove all Initializes\n\t * @method removeInitializers\n\t */\n\tremoveAllInitializers() {\n\t\tUtil.destroyArray(this.initializes);\n\t}\n\n\t/**\n\t * add the Behaviour to particles;\n\t *\n\t * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n\t * @method addBehaviour\n\t * @param {Behaviour} behaviour like this new Color('random')\n\t */\n\taddBehaviour(...rest) {\n\t\tlet i = arguments.length;\n\t\twhile (i--) {\n\t\t\tlet behaviour = rest[i];\n\t\t\tthis.behaviours.push(behaviour);\n\t\t\tif (behaviour.parents) behaviour.parents.push(this);\n\t\t}\n\t}\n\n\t/**\n\t * remove the Behaviour\n\t * @method removeBehaviour\n\t * @param {Behaviour} behaviour a behaviour\n\t */\n\tremoveBehaviour(behaviour) {\n\t\tlet index = this.behaviours.indexOf(behaviour);\n\t\tthis.behaviours.splice(index, 1);\n\n\t\tif (behaviour.parents) {\n\t\t\tindex = behaviour.parents.indexOf(behaviour);\n\t\t\tbehaviour.parents.splice(index, 1);\n\t\t}\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * remove all behaviours\n\t * @method removeAllBehaviours\n\t */\n\tremoveAllBehaviours() {\n\t\tUtil.destroyArray(this.behaviours);\n\t}\n\n\t// emitter update\n\tupdate(time) {\n\t\tthis.age += time;\n\t\tif (this.age >= this.life || this.dead) this.destroy();\n\n\t\tthis.emitting(time);\n\t\tthis.integrate(time);\n\t}\n\n\tintegrate(time) {\n\t\tif (!this.parent) return;\n\n\t\tconst damping = 1 - this.damping;\n\t\tthis.parent.integrator.calculate(this, time, damping);\n\n\t\tconst length = this.particles.length;\n\t\tlet i, particle;\n\n\t\tfor (i = length - 1; i >= 0; i--) {\n\t\t\tparticle = this.particles[i];\n\n\t\t\t// particle update\n\t\t\tparticle.update(time, i);\n\t\t\tthis.parent.integrator.calculate(particle, time, damping);\n\t\t\tthis.dispatch('PARTICLE_UPDATE', particle);\n\n\t\t\t// check dead\n\t\t\tif (particle.dead) {\n\t\t\t\tthis.dispatch('PARTICLE_DEAD', particle);\n\n\t\t\t\tthis.parent.pool.expire(particle);\n\t\t\t\tthis.particles.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tdispatch(event, target) {\n\t\tthis.parent && this.parent.dispatchEvent(event, target);\n\t\tthis.bindEvent && this.dispatchEvent(event, target);\n\t}\n\n\temitting(time) {\n\t\tif (this.totalTime === 'once') {\n\t\t\tlet i;\n\t\t\tconst length = this.rate.getValue(99999);\n\n\t\t\tif (length > 0) this.emitSpeed = length;\n\t\t\tfor (i = 0; i < length; i++) this.createParticle();\n\t\t\tthis.totalTime = 'none';\n\t\t}\n\n\t\telse {\n\t\t\tthis.emitTime += time;\n\n\t\t\tif (this.emitTime < this.totalTime) {\n\t\t\t\tconst length = this.rate.getValue(time)\n\t\t\t\tlet i;\n\n\t\t\t\tif (length > 0) this.emitSpeed = length;\n\t\t\t\tfor (i = 0; i < length; i++) this.createParticle();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * create single particle;\n\t *\n\t * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n\t * @method removeAllParticles\n\t */\n\tcreateParticle(initialize, behaviour) {\n\t\tconst particle = this.parent.pool.get(Particle);\n\t\tthis.setupParticle(particle, initialize, behaviour);\n\t\tthis.dispatch('PARTICLE_CREATED', particle);\n\n\t\treturn particle;\n\t}\n\n\tsetupParticle(particle, initialize, behaviour) {\n\t\tlet initializes = this.initializes;\n\t\tlet behaviours = this.behaviours;\n\n\t\tif (initialize) {\n\t\t\tinitializes = Util.isArray(initialize) ? initialize : [initialize];\n\t\t}\n\n\t\tif (behaviour) {\n\t\t\tbehaviour = Util.isArray(behaviour) ? behaviour : [behaviour];\n\t\t}\n\n\t\tparticle.reset();\n\t\tInitializeUtil.initialize(this, particle, initializes);\n\t\tparticle.addBehaviours(behaviours);\n\t\tparticle.parent = this;\n\n\t\tthis.particles.push(particle);\n\t}\n\n\tremove() {\n\t\tthis.stop();\n\t\tUtil.destroy(this.particles);\n\t}\n\n\t/**\n\t * Destory this Emitter\n\t * @method destroy\n\t */\n\tdestroy(slow) {\n\t\tthis.dead = true;\n\t\tthis.remove();\n\t\tthis.removeAllInitializers();\n\t\tthis.removeAllBehaviours();\n\t\tthis.parent && this.parent.removeEmitter(this);\n\t}\n\n}\n\nEventDispatcher.bind(Emitter);","import Emitter from './Emitter';\n\nexport default class BehaviourEmitter extends Emitter {\n\n\t/**\n\t * The BehaviourEmitter class inherits from Proton.Emitter\n\t *\n\t * use the BehaviourEmitter you can add behaviours to self;\n\t * @class Proton.BehaviourEmitter\n\t * @constructor\n\t * @param {Object} pObj the parameters object;\n\t */\n\tconstructor(pObj) {\n\t\tsuper(pObj);\n\n\t\tthis.selfBehaviours = [];\n\t};\n\n\t/**\n\t * add the Behaviour to emitter;\n\t *\n\t * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n\t * @method addSelfBehaviour\n\t * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n\t */\n\taddSelfBehaviour(...rest) {\n\t\tconst length = rest.length;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\tthis.selfBehaviours.push(rest[i]);\n\t\t}\n\t};\n\n\t/**\n\t * remove the Behaviour for self\n\t * @method removeSelfBehaviour\n\t * @param {Proton.Behaviour} behaviour a behaviour\n\t */\n\tremoveSelfBehaviour(behaviour) {\n\t\tconst index = this.selfBehaviours.indexOf(behaviour);\n\t\tif (index > -1) this.selfBehaviours.splice(index, 1);\n\t};\n\n\tupdate(time) {\n\t\tsuper.update(time);\n\n\t\tif (!this.sleep) {\n\t\t\tconst length = this.selfBehaviours.length;\n\t\t\tlet i;\n\n\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\tthis.selfBehaviours[i].applyBehaviour(this, time, i);\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Emitter from './Emitter';\n\nexport default class FollowEmitter extends Emitter {\n\n\t/**\n\t * The FollowEmitter class inherits from Proton.Emitter\n\t *\n\t * use the FollowEmitter will emit particle when mousemoving\n\t *\n\t * @class Proton.FollowEmitter\n\t * @constructor\n\t * @param {Element} mouseTarget mouseevent's target;\n\t * @param {Number} ease the easing of following speed;\n\t * @default 0.7\n\t * @param {Object} pObj the parameters object;\n\t */\n\tconstructor(mouseTarget, ease, pObj) {\n\t\tsuper(pObj);\n\n\t\tthis.mouseTarget = Util.initValue(mouseTarget, window);\n\t\tthis.ease = Util.initValue(ease, 0.7);\n\n\t\tthis._allowEmitting = false;\n\t\tthis.initEventHandler();\n\t};\n\n\tinitEventHandler() {\n\t\tthis.mousemoveHandler = e => this.mousemove.call(this, e);\n\t\tthis.mousedownHandler = e => this.mousedown.call(this, e);\n\t\tthis.mouseupHandler = e => this.mouseup.call(this, e);\n\n\t\tthis.mouseTarget.addEventListener('mousemove', this.mousemoveHandler, false);\n\t}\n\n\t/**\n\t * start emit particle\n\t * @method emit\n\t */\n\temit() {\n\t\tthis._allowEmitting = true;\n\t}\n\n\t/**\n\t * stop emiting\n\t * @method stop\n\t */\n\tstop() {\n\t\tthis._allowEmitting = false;\n\t}\n\n\tmousemove(e) {\n\t\tif (e.layerX || e.layerX === 0) {\n\t\t\tthis.p.x += (e.layerX - this.p.x) * this.ease;\n\t\t\tthis.p.y += (e.layerY - this.p.y) * this.ease;\n\t\t} else if (e.offsetX || e.offsetX === 0) {\n\t\t\tthis.p.x += (e.offsetX - this.p.x) * this.ease;\n\t\t\tthis.p.y += (e.offsetY - this.p.y) * this.ease;\n\t\t}\n\n\t\tif (this._allowEmitting) super.emit('once');\n\t};\n\n\t/**\n\t * Destory this Emitter\n\t * @method destroy\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\t\tthis.mouseTarget.removeEventListener('mousemove', this.mousemoveHandler, false);\n\t}\n\n}\n","import Pool from '../core/Pool';\nimport Util from '../utils/Util';\n\nexport default class BaseRenderer {\n\n    constructor(element, stroke) {\n        this.element = element;\n        this.stroke = stroke;\n\n        this.initHandler();\n\n        this.circleConf = { isCircle: true };\n        this.pool = new Pool();\n        this.name = 'BaseRenderer';\n    }\n\n    setStroke(color, thinkness) {\n        color = Util.initValue(color, '#000000');\n        thinkness = Util.initValue(thinkness, 1);\n\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => { this.onProtonUpdate.call(this) };\n        this._protonUpdateAfterHandler = () => { this.onProtonUpdateAfter.call(this) };\n        this._emitterAddedHandler = (emitter) => { this.onEmitterAdded.call(this, emitter) };\n        this._emitterRemovedHandler = (emitter) => { this.onEmitterRemoved.call(this, emitter) };\n        this._particleCreatedHandler = (particle) => { this.onParticleCreated.call(this, particle) };\n        this._particleUpdateHandler = (particle) => { this.onParticleUpdate.call(this, particle) };\n        this._particleDeadHandler = (particle) => { this.onParticleDead.call(this, particle) };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener('PROTON_UPDATE', this._protonUpdateHandler);\n        proton.addEventListener('PROTON_UPDATE_AFTER', this._protonUpdateAfterHandler);\n\n        proton.addEventListener('EMITTER_ADDED', this._emitterAddedHandler);\n        proton.addEventListener('EMITTER_REMOVED', this._emitterRemovedHandler);\n\n        proton.addEventListener('PARTICLE_CREATED', this._particleCreatedHandler);\n        proton.addEventListener('PARTICLE_UPDATE', this._particleUpdateHandler);\n        proton.addEventListener('PARTICLE_DEAD', this._particleDeadHandler);\n    }\n\n    resize(width, height) { }\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener('PROTON_UPDATE', this._protonUpdateHandler);\n        this.parent.removeEventListener('PROTON_UPDATE_AFTER', this._protonUpdateAfterHandler);\n\n        this.parent.removeEventListener('EMITTER_ADDED', this._emitterAddedHandler);\n        this.parent.removeEventListener('EMITTER_REMOVED', this._emitterRemovedHandler);\n\n        this.parent.removeEventListener('PARTICLE_CREATED', this._particleCreatedHandler);\n        this.parent.removeEventListener('PARTICLE_UPDATE', this._particleUpdateHandler);\n        this.parent.removeEventListener('PARTICLE_DEAD', this._particleDeadHandler);\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() { }\n    onProtonUpdateAfter() { }\n\n    onEmitterAdded(emitter) { }\n    onEmitterRemoved(emitter) { }\n\n    onParticleCreated(particle) { }\n    onParticleUpdate(particle) { }\n    onParticleDead(particle) { }\n}","import ImgUtil from '../utils/ImgUtil';\nimport ColorUtil from '../utils/ColorUtil';\nimport MathUtils from '../math/MathUtils';\nimport BaseRenderer from './BaseRenderer';\n\nexport default class CanvasRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext('2d');\n        this.bufferCache = {};\n\n        this.name = 'CanvasRenderer';\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body)\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        else\n            particle.color = particle.color || '#ff0000';\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = particle.body.width * particle.scale | 0;\n        const h = particle.body.height * particle.scale | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.transform['buffer']) particle.transform.buffer = this.createBuffer(particle.body);\n\n            const bufferContext = particle.transform.buffer.getContext('2d');\n            bufferContext.clearRect(0, 0, particle.transform.buffer.width, particle.transform.buffer.height);\n            bufferContext.globalAlpha = particle.alpha;\n            bufferContext.drawImage(particle.body, 0, 0);\n\n            bufferContext.globalCompositeOperation = 'source-atop';\n            bufferContext.fillStyle = ColorUtil.rgbToHex(particle.transform.rgb);\n            bufferContext.fillRect(0, 0, particle.transform.buffer.width, particle.transform.buffer.height);\n            bufferContext.globalCompositeOperation = 'source-over';\n            bufferContext.globalAlpha = 1;\n\n            this.context.drawImage(particle.transform.buffer, 0, 0, particle.transform.buffer.width, particle.transform.buffer.height, x, y, w, h);\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtils.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(particle.body, 0, 0, particle.body.width, particle.body.height, x, y, w, h);\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.transform['rgb'])\n            this.context.fillStyle = 'rgba(' + particle.transform.rgb.r + ',' + particle.transform.rgb.g + ',' + particle.transform.rgb.b + ',' + particle.alpha + ')';\n        else\n            this.context.fillStyle = particle.color;\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(particle.p.x, particle.p.y, particle.radius, 0, Math.PI * 2, true);\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer --\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + '_' + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement('canvas');\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}","import DomUtil from '../utils/DomUtil';\nimport ImgUtil from '../utils/ImgUtil';\nimport BaseRenderer from './BaseRenderer';\n\nexport default class DomRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.pool.create = (body, particle) => this.createBody(body, particle);\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.transform3d = false;\n\n        this.name = 'DomRenderer';\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.body = this.pool.get(this.circleConf, particle);\n            this.element.appendChild(particle.body);\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (this.bodyReady(particle)) {\n            if (this.transform3d)\n                DomUtil.transform3d(particle.body, particle.p.x, particle.p.y, particle.scale, particle.rotation);\n            else\n                DomUtil.transform(particle.body, particle.p.x, particle.p.y, particle.scale, particle.rotation);\n\n            particle.body.style.opacity = particle.alpha;\n            if (particle.body.isCircle) {\n                particle.body.style.backgroundColor = particle.color || '#ff0000';\n            }\n        }\n    }\n\n    onParticleDead(particle) {\n        if (this.bodyReady(particle)) {\n            this.element.removeChild(particle.body);\n            this.pool.expire(particle.body);\n            particle.body = null;\n        }\n    }\n\n    bodyReady(particle) {\n        return typeof particle.body === 'object' && particle.body && !particle.body.isInner;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = this.pool.get(img, particle);\n        DomUtil.resize(particle.body, img.width, img.height);\n\n        this.element.appendChild(particle.body);\n    }\n\n    createBody(body, particle) {\n        if (body.isCircle)\n            return this.createCircle(particle);\n        else\n            return this.createSprite(body, particle);\n    }\n\n    // private --\n    createCircle(particle) {\n        const dom = DomUtil.createDiv(`${particle.id}_dom`, 2 * particle.radius, 2 * particle.radius);\n        dom.style.borderRadius = `${particle.radius}px`;\n\n        if (this.stroke) {\n            dom.style.borderColor = this.stroke.color;\n            dom.style.borderWidth = `${this.stroke.thinkness}px`;\n        }\n        dom.isCircle = true;\n\n        return dom;\n    }\n\n    createSprite(body, particle) {\n        const url = typeof body === 'string' ? body : body.src;\n        const dom = DomUtil.createDiv(`${particle.id}_dom`, body.width, body.height);\n        dom.style.backgroundImage = `url(${url})`;\n\n        return dom;\n    }\n\n}","import BaseRenderer from './BaseRenderer';\n\nexport default class EaselRenderer extends BaseRenderer {\n\n    constructor(element, stroke) {\n        super(element);\n\n        this.stroke = stroke;\n        this.name = 'EaselRenderer';\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            this.createSprite(particle);\n        } else {\n            this.createCircle(particle);\n        }\n\n        this.element.addChild(particle.body);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            particle.body.x = particle.p.x;\n            particle.body.y = particle.p.y;\n\n            particle.body.alpha = particle.alpha;\n            particle.body.scaleX = particle.body.scaleY = particle.scale;\n            particle.body.rotation = particle.rotation;\n        }\n    }\n\n    onParticleDead(particle) {\n        if (particle.body) {\n            particle.body.parent && particle.body.parent.removeChild(particle.body);\n            this.pool.expire(particle.body);\n            particle.body = null;\n        }\n\n        if (particle.graphics) this.pool.expire(particle.graphics);\n    }\n\n    // private\n    createSprite(particle) {\n        particle.body = this.pool.get(particle.body);\n\n        if (particle.body.parent) return;\n        if (particle.body['image']) {\n            particle.body.regX = particle.body.image.width / 2;\n            particle.body.regY = particle.body.image.height / 2;\n        }\n    }\n\n    createCircle(particle) {\n        const graphics = this.pool.get(createjs.Graphics);\n\n        if (this.stroke) {\n            if (this.stroke instanceof String)\n                graphics.beginStroke(this.stroke);\n            else\n                graphics.beginStroke('#000000');\n        }\n        graphics.beginFill(particle.color || '#ff0000').drawCircle(0, 0, particle.radius);\n\n        const shape = this.pool.get(createjs.Shape, [graphics]);\n\n        particle.body = shape;\n        particle.graphics = graphics;\n    }\n\n}","import Rectangle from '../math/Rectangle';\nimport BaseRenderer from './BaseRenderer';\n\nexport default class PixelRenderer extends BaseRenderer {\n\n    constructor(element, rectangle) {\n        super(element);\n\n        this.context = this.element.getContext('2d');\n        this.imageData = null;\n        this.rectangle = null;\n        this.rectangle = rectangle;\n        this.createImageData(rectangle);\n\n        this.name = 'PixelRenderer';\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    createImageData(rectangle) {\n        this.rectangle = rectangle ? rectangle : new Rectangle(0, 0, this.element.width, this.element.height);\n        this.imageData = this.context.createImageData(this.rectangle.width, this.rectangle.height);\n        this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\n        this.imageData = this.context.getImageData(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\n    }\n\n    onProtonUpdateAfter() {\n        this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);\n    }\n\n    onParticleCreated(particle) {}\n\n    onParticleUpdate(particle) {\n        if (this.imageData) {\n            this.setPixel(this.imageData, Math.floor(particle.p.x - this.rectangle.x), Math.floor(particle.p.y - this.rectangle.y), particle);\n        }\n    }\n\n    setPixel(imagedata, x, y, particle) {\n        const rgb = particle.transform.rgb;\n\n        if ((x < 0) || (x > this.element.width) || (y < 0) || (y > this.elementwidth))\n            return;\n\n        const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n        imagedata.data[i] = rgb.r;\n        imagedata.data[i + 1] = rgb.g;\n        imagedata.data[i + 2] = rgb.b;\n        imagedata.data[i + 3] = particle.alpha * 255;\n    }\n\n    onParticleDead(particle) {\n\n    }\n\n}","import ColorUtil from '../utils/ColorUtil';\nimport MathUtils from '../math/MathUtils';\nimport BaseRenderer from './BaseRenderer';\n\nexport default class PixiRenderer extends BaseRenderer {\n\n    constructor(element, stroke) {\n        super(element);\n\n        this.stroke = stroke;\n        this.setColor = false;\n        this.pool.create = (body, particle) => this.createBody(body, particle);\n        this.name = 'PixiRenderer';\n        this.blendMode = 0;\n    }\n\n    onProtonUpdate() { }\n\n    /**\n     * @param particle\n     */\n    onParticleCreated(particle) {\n        if (particle.body) {\n            particle.body = this.pool.get(particle.body, particle);\n        } else {\n            particle.body = this.pool.get(this.circleConf, particle);\n        }\n\n        this.element.addChild(particle.body);\n    }\n\n    /**\n     * @param particle\n     */\n    onParticleUpdate(particle) {\n        this.transform(particle, particle.body);\n        if (this.setColor) particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n        if (this.blendMode != 0) particle.body.blendMode = this.blendMode;\n    }\n\n    /**\n     * @param particle\n     */\n    onParticleDead(particle) {\n        this.element.removeChild(particle.body);\n        this.pool.expire(particle.body);\n        particle.body = null;\n    }\n\n    destroy(particles) {\n        super.destroy();\n        this.pool.destroy();\n\n        let i = particles.length;\n        while (i--) {\n            let particle = particles[i];\n            if (particle.body) {\n                this.element.removeChild(particle.body);\n            }\n        }\n    }\n\n    transform(particle, target) {\n        target.x = particle.p.x;\n        target.y = particle.p.y;\n\n        target.alpha = particle.alpha;\n\n        target.scale.x = particle.scale;\n        target.scale.y = particle.scale;\n\n        // using cached version of MathUtils.PI_180 for slight performance increase.\n        target.rotation = particle.rotation * MathUtils.PI_180; // MathUtils.PI_180;\n    }\n\n    createBody(body, particle) {\n        if (body.isCircle)\n            return this.createCircle(particle);\n        else\n            return this.createSprite(body);\n    }\n\n    createSprite(body) {\n        const sprite = body.isInner ? PIXI.Sprite.fromImage(body.src) : new PIXI.Sprite(body);\n        sprite.anchor.x = 0.5;\n        sprite.anchor.y = 0.5;\n\n        return sprite;\n    }\n\n    createCircle(particle) {\n        const graphics = new PIXI.Graphics();\n\n        if (this.stroke) {\n            const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n            graphics.beginStroke(stroke);\n        }\n\n        graphics.beginFill(particle.color || 0x008ced);\n        graphics.drawCircle(0, 0, particle.radius);\n        graphics.endFill();\n\n        return graphics;\n    }\n}","import Mat3 from '../math/Mat3';\n\nexport default class MStack {\n\n\tconstructor() {\n\t\tthis.mats = [];\n\t\tthis.size = 0;\n\n\t\tfor (let i = 0; i < 20; i++) this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n\t}\n\n\tset(m, i) {\n\t\tif (i === 0)\n\t\t\tMat3.set(m, this.mats[0]);\n\t\telse\n\t\t\tMat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n\t\tthis.size = Math.max(this.size, i + 1);\n\t}\n\n\tpush(m) {\n\t\tif (this.size === 0)\n\t\t\tMat3.set(m, this.mats[0]);\n\t\telse\n\t\t\tMat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n\t\tthis.size++;\n\t}\n\n\tpop() {\n\t\tif (this.size > 0)\n\t\t\tthis.size--;\n\t}\n\n\ttop() {\n\t\treturn (this.mats[this.size - 1]);\n\t}\n}","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtils from '../math/MathUtils';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.transform.src])\n            this.texturebuffers[particle.transform.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.transform.texture = this.texturebuffers[particle.transform.src][0];\n        particle.transform.vcBuffer = this.texturebuffers[particle.transform.src][1];\n        particle.transform.tcBuffer = this.texturebuffers[particle.transform.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.transform.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.transform.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.transform.textureLoaded = true;\n        particle.transform.textureWidth = _w;\n        particle.transform.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.transform.textureLoaded = false;\n        particle.transform.tmat = Mat3.create();\n        particle.transform.tmat[8] = 1;\n        particle.transform.imat = Mat3.create();\n        particle.transform.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.transform.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.transform.src = img.src;\n        particle.transform.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.transform.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.transform.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.transform.rgb.r / 255, particle.transform.rgb.g / 255, particle.transform.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.transform.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.transform.textureWidth / 2, -particle.transform.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtils.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.transform.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.transform.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from './BaseRenderer';\n\nexport default class CustomRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.name = 'CustomRenderer';\n    }\n\n}","import Zone from './Zone';\nimport Util from '../utils/Util';\nimport MathUtils from '../math/MathUtils';\n\nexport default class LineZone extends Zone {\n\n\tconstructor(x1, y1, x2, y2, direction) {\n\t\tsuper();\n\n\t\tif (x2 - x1 >= 0) {\n\t\t\tthis.x1 = x1;\n\t\t\tthis.y1 = y1;\n\t\t\tthis.x2 = x2;\n\t\t\tthis.y2 = y2;\n\t\t} else {\n\t\t\tthis.x1 = x2;\n\t\t\tthis.y1 = y2;\n\t\t\tthis.x2 = x1;\n\t\t\tthis.y2 = y1;\n\t\t}\n\n\t\tthis.dx = this.x2 - this.x1;\n\t\tthis.dy = this.y2 - this.y1;\n\n\t\tthis.minx = Math.min(this.x1, this.x2);\n\t\tthis.miny = Math.min(this.y1, this.y2);\n\t\tthis.maxx = Math.max(this.x1, this.x2);\n\t\tthis.maxy = Math.max(this.y1, this.y2);\n\n\t\tthis.dot = this.x2 * this.y1 - this.x1 * this.y2;\n\t\tthis.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n\t\tthis.gradient = this.getGradient();\n\t\tthis.length = this.getLength();\n\t\tthis.direction = Util.initValue(direction, '>');\n\t}\n\n\tgetPosition() {\n\t\tthis.random = Math.random();\n\t\tthis.vector.x = this.x1 + this.random * this.length * Math.cos(this.gradient);\n\t\tthis.vector.y = this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n\t\treturn this.vector;\n\t}\n\n\tgetDirection(x, y) {\n\t\tconst A = this.dy;\n\t\tconst B = -this.dx;\n\t\tconst C = this.dot;\n\t\tconst D = B === 0 ? 1 : B;\n\n\t\tif ((A * x + B * y + C) * D > 0)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tgetDistance(x, y) {\n\t\tconst A = this.dy;\n\t\tconst B = -this.dx;\n\t\tconst C = this.dot;\n\t\tconst D = (A * x + B * y + C);\n\n\t\treturn D / Math.sqrt(this.xxyy);\n\t}\n\n\tgetSymmetric(v) {\n\t\tconst tha2 = v.getGradient();\n\t\tconst tha1 = this.getGradient();\n\t\tconst tha = 2 * (tha1 - tha2);\n\n\t\tconst oldx = v.x;\n\t\tconst oldy = v.y;\n\n\t\tv.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n\t\tv.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n\t\treturn v;\n\t}\n\n\tgetGradient() {\n\t\treturn Math.atan2(this.dy, this.dx);\n\t}\n\n\trangeOut(particle) {\n\t\tconst angle = Math.abs(this.getGradient());\n\n\t\tif (angle <= MathUtils.PI / 4) {\n\t\t\tif (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n\t\t} else {\n\t\t\tif (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetLength() {\n\t\treturn Math.sqrt(this.dx * this.dx + this.dy * this.dy)\n\t}\n\n\tcrossing(particle) {\n\t\tif (this.crossType === 'dead') {\n\t\t\tif (this.direction === '>' || this.direction === 'R' || this.direction === 'right' || this.direction === 'down') {\n\t\t\t\tif (!this.rangeOut(particle)) return;\n\t\t\t\tif (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n\t\t\t} else {\n\t\t\t\tif (!this.rangeOut(particle)) return;\n\t\t\t\tif (!this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n\t\t\t}\n\t\t}\n\n\t\telse if (this.crossType === 'bound') {\n\t\t\tif (!this.rangeOut(particle)) return;\n\n\t\t\tif (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n\t\t\t\tif (this.dx === 0) {\n\t\t\t\t\tparticle.v.x *= -1;\n\t\t\t\t} else if (this.dy === 0) {\n\t\t\t\t\tparticle.v.y *= -1;\n\t\t\t\t} else {\n\t\t\t\t\tthis.getSymmetric(particle.v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telse if (this.crossType === 'cross') {\n\t\t\tif (this.alert) {\n\t\t\t\tconsole.error('Sorry lineZone does not support cross method');\n\t\t\t\tthis.alert = false;\n\t\t\t}\n\t\t}\n\t}\n}","import Zone from './Zone';\nimport MathUtils from '../math/MathUtils';\n\nexport default class CircleZone extends Zone {\n\n    constructor(x, y, radius) {\n        super();\n\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n\n        this.angle = 0;\n        this.center = { x, y };\n    }\n\n    getPosition() {\n        this.random = Math.random();\n        this.angle = MathUtils.PIx2 * Math.random();\n\n        this.vector.x = this.x + this.random * this.radius * Math.cos(this.angle);\n        this.vector.y = this.y + this.random * this.radius * Math.sin(this.angle);\n\n        return this.vector;\n    }\n\n    setCenter(x, y) {\n        this.center.x = x;\n        this.center.y = y;\n    }\n\n    crossing(particle) {\n        const d = particle.p.distanceTo(this.center);\n\n        if (this.crossType === 'dead') {\n            if (d - particle.radius > this.radius)\n                particle.dead = true;\n        } else if (this.crossType === 'bound') {\n            if (d + particle.radius >= this.radius)\n                this.getSymmetric(particle);\n        } else if (this.crossType === 'cross') {\n            if (this.alert) {\n                alert('Sorry CircleZone does not support cross method');\n                this.alert = false;\n            }\n        }\n    }\n\n    getSymmetric(particle) {\n        let tha2 = particle.v.getGradient();\n        let tha1 = this.getGradient(particle);\n\n        let tha = 2 * (tha1 - tha2);\n        let oldx = particle.v.x;\n        let oldy = particle.v.y;\n\n        particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n        particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n    }\n\n    getGradient(particle) {\n        return -MathUtils.PI_2 + Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x);\n    }\n}","import Zone from './Zone';\n\nexport default class RectZone extends Zone {\n\n\tconstructor(x, y, width, height) {\n\t\tsuper();\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tgetPosition() {\n\t\tthis.vector.x = this.x + Math.random() * this.width;\n\t\tthis.vector.y = this.y + Math.random() * this.height;\n\n\t\treturn this.vector;\n\t}\n\n\tcrossing(particle) {\n\t\tif (this.crossType === 'dead') {\n\t\t\tif (particle.p.x + particle.radius < this.x)\n\t\t\t\tparticle.dead = true;\n\t\t\telse if (particle.p.x - particle.radius > this.x + this.width)\n\t\t\t\tparticle.dead = true;\n\n\t\t\tif (particle.p.y + particle.radius < this.y)\n\t\t\t\tparticle.dead = true;\n\t\t\telse if (particle.p.y - particle.radius > this.y + this.height)\n\t\t\t\tparticle.dead = true;\n\t\t}\n\n\t\telse if (this.crossType === 'bound') {\n\t\t\tif (particle.p.x - particle.radius < this.x) {\n\t\t\t\tparticle.p.x = this.x + particle.radius;\n\t\t\t\tparticle.v.x *= -1;\n\t\t\t} else if (particle.p.x + particle.radius > this.x + this.width) {\n\t\t\t\tparticle.p.x = this.x + this.width - particle.radius;\n\t\t\t\tparticle.v.x *= -1;\n\t\t\t}\n\n\t\t\tif (particle.p.y - particle.radius < this.y) {\n\t\t\t\tparticle.p.y = this.y + particle.radius;\n\t\t\t\tparticle.v.y *= -1;\n\t\t\t} else if (particle.p.y + particle.radius > this.y + this.height) {\n\t\t\t\tparticle.p.y = this.y + this.height - particle.radius;\n\t\t\t\tparticle.v.y *= -1;\n\t\t\t}\n\t\t}\n\n\t\telse if (this.crossType === 'cross') {\n\t\t\tif (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n\t\t\t\tparticle.p.x = this.x + this.width + particle.radius;\n\t\t\telse if (particle.p.x - particle.radius > this.x + this.width && particle.v.x >= 0)\n\t\t\t\tparticle.p.x = this.x - particle.radius;\n\n\t\t\tif (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n\t\t\t\tparticle.p.y = this.y + this.height + particle.radius;\n\t\t\telse if (particle.p.y - particle.radius > this.y + this.height && particle.v.y >= 0)\n\t\t\t\tparticle.p.y = this.y - particle.radius;\n\t\t}\n\t}\n}","import Zone from './Zone';\nimport Util from '../utils/Util';\n\nexport default class ImageZone extends Zone {\n\n\tconstructor(imageData, x, y, d) {\n\t\tsuper();\n\n\t\tthis.reset(imageData, x, y, d);\n\t}\n\n\treset(imageData, x, y, d) {\n\t\tthis.imageData = imageData;\n\t\tthis.x = Util.initValue(x, 0);\n\t\tthis.y = Util.initValue(y, 0);\n\t\tthis.d = Util.initValue(d, 2);\n\n\t\tthis.vectors = [];\n\t\tthis.setVectors();\n\t}\n\n\tsetVectors() {\n\t\tlet i, j;\n\t\tconst length1 = this.imageData.width;\n\t\tconst length2 = this.imageData.height;\n\n\t\tfor (i = 0; i < length1; i += this.d) {\n\t\t\tfor (j = 0; j < length2; j += this.d) {\n\t\t\t\tlet index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n\t\t\t\tif (this.imageData.data[index + 3] > 0) {\n\t\t\t\t\tthis.vectors.push({ x: i + this.x, y: j + this.y });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.vector;\n\t}\n\n\tgetBound(x, y) {\n\t\tvar index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\t\tif (this.imageData.data[index + 3] > 0)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tgetPosition() {\n\t\treturn this.vector.copy(this.vectors[Math.floor(Math.random() * this.vectors.length)]);\n\t}\n\n\tgetColor(x, y) {\n\t\tx -= this.x;\n\t\ty -= this.y;\n\t\tvar i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n\t\treturn {\n\t\t\tr: this.imageData.data[i],\n\t\t\tg: this.imageData.data[i + 1],\n\t\t\tb: this.imageData.data[i + 2],\n\t\t\ta: this.imageData.data[i + 3]\n\t\t};\n\t}\n\n\tcrossing(particle) {\n\t\tif (this.crossType === 'dead') {\n\t\t\tif (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n\t\t\t\tparticle.dead = true;\n\t\t\telse\n\t\t\t\tparticle.dead = false;\n\t\t}\n\t\telse if (this.crossType === 'bound') {\n\t\t\tif (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n\t\t\t\tparticle.v.negate();\n\t\t}\n\t}\n}","import ColorUtil from '../utils/ColorUtil';\nimport CircleZone from '../zone/CircleZone';\nimport PointZone from '../zone/PointZone';\nimport LineZone from '../zone/LineZone';\nimport RectZone from '../zone/RectZone';\n\nexport default {\n\taddEventListener(proton, fun) {\n\t\tproton.addEventListener('PROTON_UPDATE_AFTER', () => fun());\n\t},\n\n\tgetStyle(color) {\n\t\tconst rgb = ColorUtil.hexToRGB(color || '#ff0000');\n\t\treturn `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n\t},\n\n\tdrawZone(proton, canvas, zone, clear) {\n\t\tconst context = canvas.getContext('2d');\n\t\tconst style = this.getStyle();\n\n\t\tthis.addEventListener(proton, () => {\n\t\t\tif (clear)\n\t\t\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t\tif (zone instanceof PointZone) {\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.fillStyle = style;\n\t\t\t\tcontext.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n\t\t\t\tcontext.fill();\n\t\t\t\tcontext.closePath();\n\t\t\t} else if (zone instanceof LineZone) {\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.strokeStyle = style;\n\t\t\t\tcontext.moveTo(zone.x1, zone.y1);\n\t\t\t\tcontext.lineTo(zone.x2, zone.y2);\n\t\t\t\tcontext.stroke();\n\t\t\t\tcontext.closePath();\n\t\t\t} else if (zone instanceof RectZone) {\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.strokeStyle = style;\n\t\t\t\tcontext.drawRect(zone.x, zone.y, zone.width, zone.height);\n\t\t\t\tcontext.stroke();\n\t\t\t\tcontext.closePath();\n\t\t\t} else if (zone instanceof CircleZone) {\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.strokeStyle = style;\n\t\t\t\tcontext.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n\t\t\t\tcontext.stroke();\n\t\t\t\tcontext.closePath();\n\t\t\t}\n\t\t});\n\t},\n\n\tdrawEmitter(proton, canvas, emitter, clear) {\n\t\tconst context = canvas.getContext('2d');\n\t\tconst style = this.getStyle();\n\n\t\tthis.addEventListener(proton, () => {\n\t\t\tif (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t\tcontext.beginPath();\n\t\t\tcontext.fillStyle = style;\n\t\t\tcontext.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n\t\t\tcontext.fill();\n\t\t\tcontext.closePath();\n\t\t});\n\t}\n}","// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n// requestAnimationFrame polyfill by Erik Möller\n// fixes from Paul Irish and Tino Zijdel\n(function () {\n\tvar lastTime = 0;\n\tvar vendors = ['ms', 'moz', 'webkit', 'o'];\n\tfor (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n\t}\n\n\tif (!window.requestAnimationFrame)\n\t\twindow.requestAnimationFrame = function (callback, element) {\n\t\t\tvar currTime = new Date().getTime();\n\t\t\tvar timeToCall = Math.max(0, 16 - (currTime - lastTime));\n\t\t\tvar id = window.setTimeout(function () {\n\t\t\t\tcallback(currTime + timeToCall);\n\t\t\t}, timeToCall);\n\t\t\tlastTime = currTime + timeToCall;\n\t\t\treturn id;\n\t\t};\n\n\tif (!window.cancelAnimationFrame)\n\t\twindow.cancelAnimationFrame = function (id) {\n\t\t\tclearTimeout(id);\n\t\t};\n}());","import Proton from './core/Proton';\nimport Particle from './core/Particle';\nimport Pool from './core/Pool';\n\nimport Util from './utils/Util';\nimport ColorUtil from './utils/ColorUtil';\nimport MathUtils from './math/MathUtils';\nimport Vector2D from './math/Vector2D';\nimport Polar2D from './math/Polar2D';\nimport Mat3 from './math/Mat3';\nimport Span from './math/Span';\nimport ArraySpan from './math/ArraySpan';\nimport ColorSpan from './math/ColorSpan';\nimport Rectangle from './math/Rectangle';\nimport ease from './math/ease';\n\nimport Rate from './initialize/Rate';\nimport Initialize from './initialize/Initialize';\nimport Life from './initialize/Life';\nimport Position from './initialize/Position';\nimport Velocity from './initialize/Velocity';\nimport Mass from './initialize/Mass';\nimport Radius from './initialize/Radius';\nimport Body from './initialize/Body';\n\nimport Behaviour from './behaviour/Behaviour';\nimport Force from './behaviour/Force';\nimport Attraction from './behaviour/Attraction';\nimport RandomDrift from './behaviour/RandomDrift';\nimport Gravity from './behaviour/Gravity';\nimport Collision from './behaviour/Collision';\nimport CrossZone from './behaviour/CrossZone';\nimport Alpha from './behaviour/Alpha';\nimport Scale from './behaviour/Scale';\nimport Rotate from './behaviour/Rotate';\nimport Color from './behaviour/Color';\nimport Repulsion from './behaviour/Repulsion';\nimport GravityWell from './behaviour/GravityWell';\n\nimport Emitter from './emitter/Emitter';\nimport BehaviourEmitter from './emitter/BehaviourEmitter';\nimport FollowEmitter from './emitter/FollowEmitter';\n\nimport CanvasRenderer from './render/CanvasRenderer';\nimport DomRenderer from './render/DomRenderer';\nimport EaselRenderer from './render/EaselRenderer';\nimport PixelRenderer from './render/PixelRenderer';\nimport PixiRenderer from './render/PixiRenderer';\nimport WebGLRenderer from './render/WebGLRenderer';\nimport CustomRenderer from './render/CustomRenderer';\n\nimport Zone from './zone/Zone';\nimport LineZone from './zone/LineZone';\nimport CircleZone from './zone/CircleZone';\nimport PointZone from './zone/PointZone';\nimport RectZone from './zone/RectZone';\nimport ImageZone from './zone/ImageZone';\n\nimport Debug from './debug/Debug';\nimport './polyfill/requestAnimationFrame';\n\n// namespace\nProton.Particle = Proton.P = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtils = MathUtils;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.ColorSpan = ColorSpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Proton.A = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\n\nObject.assign(Proton, ease);\n\n// export\nexport default Proton;"],"names":["PI","MathUtils","a","b","INT","Math","floor","random","center","f","this","randomAToB","display","num","toString","slice","Span","isArray","length","randomFloating","Util","initValue","i","tx","ty","angleInRadians","c","cos","s","sin","sx","sy","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","id","width","height","position","dom","document","createElement","style","opacity","transform","resize","marginLeft","marginTop","div","x","y","scale","rotate","willChange","css3","key","val","bkey","charAt","toUpperCase","substr","IMG_CACHE","CANVAS_CACHE","context","image","rect","drawImage","imagedata","getImageData","clearRect","img","callback","param","src","Image","onload","e","target","WebGLUtil","canvas","DomUtil","createCanvas","getContext","value","defaults","Object","prototype","call","array","obj","ignore","o","indexOf","constructor","args","concat","bind","apply","pOBJ","hasProp","p","v","copy","undefined","prototypeObject","filters","singleProp","hasOwnProperty","getSpanValue","pan","getValue","ImgUtil","arr","destroy","uid","getCacheID","cache","isInner","Pool","params","__puid","PUID","getID","pop","createOrClone","getCache","push","total","create","classApply","clone","count","Stats","body","add","emitter","getEmitter","renderer","getRenderer","str","type","proton","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","pool","container","innerHTML","cssText","join","addEventListener","_this","bg","color","parentNode","appendChild","emitterIndex","renderers","rendererIndex","result","cpool","round","EventDispatcher","listener","_listeners","removeEventListener","splice","listeners","handler","TargetClass","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","particles","time","damping","eulerIntegrate","particle","sleep","old","multiplyScalar","mass","clear","Proton","render","init","index","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","PROTON_UPDATE","USE_CLOCK","oldTime","Date","getTime","elapsed","amendChangeTabsBug","emittersUpdate","PROTON_UPDATE_AFTER","update","getAllParticles","integrationType","stats","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","pow","PI_2","sqrt","ease","easeLinear","Vector2D","atan2","w","addVectors","subVectors","set","divideScalar","distanceToSquared","tha","dx","dy","alpha","Particle","N180_PI","life","Infinity","age","energy","dead","sprite","radius","rotation","easing","destroyObject","removeAllBehaviours","rgb","r","g","applyBehaviours","max","applyBehaviour","behaviour","parents","initialize","addBehaviour","destroyArray","ID","reset","setPrototypeByObject","h","hex16","substring","parseInt","rbg","Number","Polar2D","getX","getY","abs","mat3","mat","Float32Array","mat1","mat2","m","vec","ColorSpan","min","_baseR","variantR","_baseG","variantG","_baseB","variantB","ColorUtil","rbgToHexString","_color","hexToRGB","ArraySpan","_arr","randomColor","Rectangle","right","bottom","Rate","startTime","nextTime","timePan","numPan","numpan","timepan","setSpanValue","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","Position","zone","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","PI_180","Mass","massPan","Radius","oldRadius","Body","imagetarget","inner","Behaviour","getEasing","force","removeBehaviour","Force","fx","fy","normalizeForce","calculate","Attraction","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Gravity","Collision","collisionPool","delta","newPool","otherParticle","overlap","totalMass","averageMass1","averageMass2","distance","CrossZone","crossing","Alpha","same","alphaA","alphaB","Scale","scaleA","scaleB","Rotate","rotationA","rotationB","getDirection","influence","Color","createArraySpan","colorA","colorB","Repulsion","GravityWell","centerPoint","distanceVec","distanceSq","factor","bindEmitter","setVector2DByObject","degreeTransform","Emitter","totalTime","stoped","emitTime","isNaN","rate","oldStoped","oldEmitTime","oldTotalTime","pObj","initAll","rest","initializer","arguments","emitting","integrate","dispatch","expire","event","bindEvent","createParticle","get","setupParticle","addBehaviours","stop","slow","removeAllInitializers","removeEmitter","BehaviourEmitter","selfBehaviours","FollowEmitter","mousemoveHandler","_this2","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","layerY","offsetX","offsetY","babelHelpers.get","window","initEventHandler","BaseRenderer","thinkness","stroke","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","onParticleCreated","_particleUpdateHandler","onParticleUpdate","_particleDeadHandler","onParticleDead","element","initHandler","circleConf","isCircle","CanvasRenderer","addImg2Body","drawCircle","buffer","createBuffer","bufferContext","globalAlpha","globalCompositeOperation","fillStyle","rgbToHex","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","size","bufferCache","DomRenderer","bodyReady","transform3d","backgroundColor","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","createBody","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","String","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","data","PixiRenderer","setColor","tint","getHex16FromParticle","blendMode","PIXI","Sprite","fromImage","anchor","endFill","MStack","Mat3","mats","multiply","WebGLRenderer","umat","smat","mstack","gl","viewport","circleCanvasURL","texturebuffers","A","blendEquation","B","blendFunc","fs","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","angel","rotationMatrix","scaleMatrix","matrix","inverse","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","FUNC_ADD","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","CustomRenderer","LineZone","x1","gradient","y1","dot","xxyy","tha2","getGradient","oldx","oldy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","error","x2","y2","getLength","CircleZone","angle","PIx2","d","distanceTo","RectZone","ImageZone","vectors","setVectors","j","length1","length2","getBound","negate","fun","getStyle","moveTo","lineTo","drawRect","lastTime","vendors","requestAnimationFrame","cancelAnimationFrame","currTime","timeToCall","setTimeout","P","Vector","Polar","getSpan","Init","L","V","M","R","F","RD","G","S","WebGlRenderer","Debug","assign"],"mappings":"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"}